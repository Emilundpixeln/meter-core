var _n=Object.defineProperty;var xn=Object.getOwnPropertyDescriptor;var Rn=Object.getOwnPropertyNames;var Bn=Object.prototype.hasOwnProperty;var Mn=(f,r,a)=>r in f?_n(f,r,{enumerable:!0,configurable:!0,writable:!0,value:a}):f[r]=a;var On=(f,r)=>{for(var a in r)_n(f,a,{get:r[a],enumerable:!0})},Cn=(f,r,a,s)=>{if(r&&typeof r=="object"||typeof r=="function")for(let n of Rn(r))!Bn.call(f,n)&&n!==a&&_n(f,n,{get:()=>r[n],enumerable:!(s=xn(r,n))||s.enumerable});return f};var Nn=f=>Cn(_n({},"__esModule",{value:!0}),f);var F=(f,r,a)=>(Mn(f,typeof r!="symbol"?r+"":r,a),a),mn=(f,r,a)=>{if(!r.has(f))throw TypeError("Cannot "+a)};var R=(f,r,a)=>(mn(f,r,"read from private field"),a?a.call(f):r.get(f)),V=(f,r,a)=>{if(r.has(f))throw TypeError("Cannot add the same private member more than once");r instanceof WeakSet?r.add(f):r.set(f,a)},en=(f,r,a,s)=>(mn(f,r,"write to private field"),s?s.call(f,a):r.set(f,a),a);var W=(f,r,a)=>(mn(f,r,"access private method"),a);var jn={};On(jn,{Parser:()=>Sn});module.exports=Nn(jn);var kn=require("tiny-typed-emitter");var H=(u=>(u[u.none=0]="none",u[u.slot=1]="slot",u[u.stat=2]="stat",u[u.ability_point=3]="ability_point",u[u.combat_effect=4]="combat_effect",u[u.skill_damage=5]="skill_damage",u[u.skill_critical_ratio=6]="skill_critical_ratio",u[u.skill_critical_damage=7]="skill_critical_damage",u[u.skill_penetration=8]="skill_penetration",u[u.npc_grade_less_damage=9]="npc_grade_less_damage",u[u.npc_grade_less_critical_ratio=10]="npc_grade_less_critical_ratio",u[u.npc_grade_less_critical_damage=11]="npc_grade_less_critical_damage",u[u.npc_grade_less_penetration=12]="npc_grade_less_penetration",u[u.npc_grade_greater_damage=13]="npc_grade_greater_damage",u[u.npc_grade_greater_critical_ratio=14]="npc_grade_greater_critical_ratio",u[u.npc_grade_greater_critical_damage=15]="npc_grade_greater_critical_damage",u[u.npc_grade_greater_penetration=16]="npc_grade_greater_penetration",u[u.npc_species_damage=17]="npc_species_damage",u[u.npc_species_critical_ratio=18]="npc_species_critical_ratio",u[u.npc_species_critical_damage=19]="npc_species_critical_damage",u[u.npc_species_penetration=20]="npc_species_penetration",u[u.npc_attr_damage=21]="npc_attr_damage",u[u.npc_attr_critical_ratio=22]="npc_attr_critical_ratio",u[u.npc_attr_critical_damage=23]="npc_attr_critical_damage",u[u.npc_attr_penetration=24]="npc_attr_penetration",u[u.mana_reduction=25]="mana_reduction",u[u.skill_mana_reduction=26]="skill_mana_reduction",u[u.skill_cooldown_reduction=27]="skill_cooldown_reduction",u[u.ability_feature=28]="ability_feature",u[u.class_option=29]="class_option",u[u.ability_point_passive=30]="ability_point_passive",u[u.instrument=31]="instrument",u[u.skill_feature=32]="skill_feature",u[u.npc_adaptation=33]="npc_adaptation",u[u.skill_group_damage=34]="skill_group_damage",u[u.skill_group_cooldown_reduction=35]="skill_group_cooldown_reduction",u[u.skill_level=36]="skill_level",u[u.skill_feature_level=37]="skill_feature_level",u[u.life_casting_speed=38]="life_casting_speed",u[u.life_casting_tier=39]="life_casting_tier",u[u.life_bonus_type_success=40]="life_bonus_type_success",u[u.life_bonus_type_extra=41]="life_bonus_type_extra",u[u.life_bonus_type_skill_bonus=42]="life_bonus_type_skill_bonus",u[u.life_bonus_type_minigame_perfect=43]="life_bonus_type_minigame_perfect",u[u.life_durability_bonus=44]="life_durability_bonus",u[u.life_mini_game_difficulty=45]="life_mini_game_difficulty",u[u.combat_effect_cooldown_reduction=46]="combat_effect_cooldown_reduction",u[u.skill_damage_addend=47]="skill_damage_addend",u[u.awakening_usable_count_addend=48]="awakening_usable_count_addend",u[u.battle_item_heal=49]="battle_item_heal",u[u.party_heal=50]="party_heal",u[u.party_shield=51]="party_shield",u[u.identity_gauge=52]="identity_gauge",u[u.attack_power_amplify_addend=53]="attack_power_amplify_addend",u[u.attack_power_amplify_multiplier=54]="attack_power_amplify_multiplier",u[u.not_in_party_damage=55]="not_in_party_damage",u[u.skill_effect_group_set_damage=56]="skill_effect_group_set_damage",u))(H||{});var sn=(t=>(t[t.none=0]="none",t[t.modify_damage=1]="modify_damage",t[t.modify_final_damage=2]="modify_final_damage",t[t.modify_critical_ratio=3]="modify_critical_ratio",t[t.modify_critical_multiplier=4]="modify_critical_multiplier",t[t.modify_penetration=5]="modify_penetration",t[t.modify_penetration_when_critical=6]="modify_penetration_when_critical",t[t.exec_active_effect_when_damage=7]="exec_active_effect_when_damage",t[t.exec_active_effect_when_critical=8]="exec_active_effect_when_critical",t[t.exec_reactive_effect_when_miss=9]="exec_reactive_effect_when_miss",t[t.exec_reactive_effect_when_damage=10]="exec_reactive_effect_when_damage",t[t.exec_reactive_effect_when_critical=11]="exec_reactive_effect_when_critical",t[t.exec_after_effect=12]="exec_after_effect",t[t.exec_after_skill=13]="exec_after_skill",t[t.apply_heal=14]="apply_heal",t[t.modify_reactive_damage=15]="modify_reactive_damage",t[t.modify_damage_shield_multiplier=16]="modify_damage_shield_multiplier",t[t.exec_active_effect_when_kill=17]="exec_active_effect_when_kill",t[t.exec_start_skill=18]="exec_start_skill",t[t.modify_penetration_addend=19]="modify_penetration_addend",t[t.modify_penetration_addend_when_critical=20]="modify_penetration_addend_when_critical",t[t.modify_reactive_critical_multiplier=21]="modify_reactive_critical_multiplier",t[t.modify_damage_when_critical=22]="modify_damage_when_critical",t[t.modify_paralyzation_point=23]="modify_paralyzation_point",t))(sn||{});var tn=(m=>(m[m.none=0]="none",m[m.underling=1]="underling",m[m.normal=2]="normal",m[m.elite=3]="elite",m[m.named=4]="named",m[m.seed=5]="seed",m[m.boss=6]="boss",m[m.raid=7]="raid",m[m.lucky=8]="lucky",m[m.epic_raid=9]="epic_raid",m[m.commander=10]="commander",m))(tn||{});var rn=(a=>(a[a.absolute=0]="absolute",a[a.relative=1]="relative",a))(rn||{}),ln=(i=>(i[i.none=0]="none",i[i.enable_notify=1]="enable_notify",i[i.enable_dir_change=2]="enable_dir_change",i[i.change_move_dist=3]="change_move_dist",i[i.change_layer=4]="change_layer",i[i.change_stage_speed=5]="change_stage_speed",i[i.change_stage_collision=6]="change_stage_collision",i[i.change_max_target=7]="change_max_target",i[i.change_area_range=8]="change_area_range",i[i.change_area_angle=9]="change_area_angle",i[i.change_cost=10]="change_cost",i[i.recover_cost=11]="recover_cost",i[i.recover_used_cost=12]="recover_used_cost",i[i.reduce_default_cooldown=13]="reduce_default_cooldown",i[i.reduce_active_cooldown=14]="reduce_active_cooldown",i[i.enable_stage_buff=15]="enable_stage_buff",i[i.add_stage_buff=16]="add_stage_buff",i[i.change_buff_area_range=17]="change_buff_area_range",i[i.change_buff_duration=18]="change_buff_duration",i[i.change_buff_stat=19]="change_buff_stat",i[i.change_buff_stack=20]="change_buff_stack",i[i.change_buff_param=21]="change_buff_param",i[i.change_buff_expired_action=22]="change_buff_expired_action",i[i.change_chain_ratio=23]="change_chain_ratio",i[i.change_abnormal=24]="change_abnormal",i[i.change_abnormal_ratio=25]="change_abnormal_ratio",i[i.change_dam_attr=26]="change_dam_attr",i[i.change_dam_value=27]="change_dam_value",i[i.change_dam_coefficient=28]="change_dam_coefficient",i[i.change_dam_critical=29]="change_dam_critical",i[i.change_dam_critical_rate=30]="change_dam_critical_rate",i[i.change_attack_stage_speed=31]="change_attack_stage_speed",i[i.change_stack_charge_time=32]="change_stack_charge_time",i[i.change_stack_max_count=33]="change_stack_max_count",i[i.change_targeting=34]="change_targeting",i[i.change_min_range=35]="change_min_range",i[i.change_max_range=36]="change_max_range",i[i.change_push_info=37]="change_push_info",i[i.change_parts_attack_attr=38]="change_parts_attack_attr",i[i.change_skill_chain_info=39]="change_skill_chain_info",i[i.change_skill_chain_delay=40]="change_skill_chain_delay",i[i.change_behit_move_info=41]="change_behit_move_info",i[i.add_buff_stat=42]="add_buff_stat",i[i.add_chain_skill_effect=43]="add_chain_skill_effect",i[i.remove_chain_skill_effect=44]="remove_chain_skill_effect",i[i.add_chain_combat_effect=45]="add_chain_combat_effect",i[i.remove_chain_combat_effect=46]="remove_chain_combat_effect",i[i.change_skill_effect_bonus=47]="change_skill_effect_bonus",i[i.change_skill_effect_ai_point=48]="change_skill_effect_ai_point",i[i.change_dam_addend=49]="change_dam_addend",i[i.change_hitted=50]="change_hitted",i[i.change_skill_move_speed=51]="change_skill_move_speed",i[i.add_skill_buff=52]="add_skill_buff",i[i.change_skill_bonus=53]="change_skill_bonus",i[i.change_skill_normal_info=54]="change_skill_normal_info",i[i.change_skill_invisibility=55]="change_skill_invisibility",i[i.change_skill_constraint=56]="change_skill_constraint",i[i.change_skill_book_type=57]="change_skill_book_type",i[i.change_projection_skill_effect_id=58]="change_projection_skill_effect_id",i[i.change_push_pvp_info=59]="change_push_pvp_info",i[i.change_forced_critical=60]="change_forced_critical",i[i.change_instance_skill_effect_info=61]="change_instance_skill_effect_info",i[i.change_skill_start_stage=62]="change_skill_start_stage",i[i.change_skill_effect_dir_target=63]="change_skill_effect_dir_target",i[i.change_stage_dir_rate=64]="change_stage_dir_rate",i[i.change_projection=65]="change_projection",i[i.change_skill_view=66]="change_skill_view",i[i.change_projectile_speed=67]="change_projectile_speed",i[i.change_projectile_dist=68]="change_projectile_dist",i[i.change_projectile_resourcescale=69]="change_projectile_resourcescale",i[i.change_projectile_max_target_hit_count=70]="change_projectile_max_target_hit_count",i[i.change_summon_trap_lifetime=71]="change_summon_trap_lifetime",i[i.change_summon_trap_destroy_delaytime=72]="change_summon_trap_destroy_delaytime",i[i.change_summon_trap_react_info=73]="change_summon_trap_react_info",i[i.change_summon_trap_invoke_effect=74]="change_summon_trap_invoke_effect",i[i.change_summon_trap_count=75]="change_summon_trap_count",i[i.enable_identity_event=76]="enable_identity_event",i[i.change_identity_proc_value=77]="change_identity_proc_value",i[i.change_skill_effect_identity_proc_info=78]="change_skill_effect_identity_proc_info",i[i.change_identity_proc_pvp_value=79]="change_identity_proc_pvp_value",i[i.change_skill_effect_identity_proc_pvp_info=80]="change_skill_effect_identity_proc_pvp_info",i[i.change_skill_effect_identity_proc_replace_info=81]="change_skill_effect_identity_proc_replace_info",i[i.change_skill_effect_identity_proc_replace_pvp_info=82]="change_skill_effect_identity_proc_replace_pvp_info",i[i.swap_chain_skill_effect=83]="swap_chain_skill_effect",i[i.swap_chain_combat_effect=84]="swap_chain_combat_effect",i[i.change_charge_scale=85]="change_charge_scale",i[i.change_summon_npc_id=86]="change_summon_npc_id",i[i.change_summon_npc_sight_range=87]="change_summon_npc_sight_range",i[i.change_summon_npc_pursuit_range=88]="change_summon_npc_pursuit_range",i[i.change_summon_npc_walk_movespeed=89]="change_summon_npc_walk_movespeed",i[i.change_summon_npc_battle_movespeed=90]="change_summon_npc_battle_movespeed",i[i.change_summon_npc_life_time=91]="change_summon_npc_life_time",i[i.change_summon_npc_ai_index=92]="change_summon_npc_ai_index",i[i.change_summon_npc_invincible_duration=93]="change_summon_npc_invincible_duration",i[i.change_summon_npc_acquire_identity=94]="change_summon_npc_acquire_identity",i[i.change_summon_npc_skill_id=95]="change_summon_npc_skill_id",i[i.change_summon_npc_die_skill_id=96]="change_summon_npc_die_skill_id",i[i.change_summon_npc_destroy_skill_id=97]="change_summon_npc_destroy_skill_id",i[i.change_summon_npc_spawn_buff_id=98]="change_summon_npc_spawn_buff_id",i[i.change_summon_npc_count=99]="change_summon_npc_count",i[i.change_summon_npc_stat=100]="change_summon_npc_stat",i[i.change_summon_npc_threat_point=101]="change_summon_npc_threat_point",i[i.change_summon_npc_skill_usable_tick=102]="change_summon_npc_skill_usable_tick",i[i.change_summon_npc_skill_use_order=103]="change_summon_npc_skill_use_order",i[i.change_combat_effect_arg=104]="change_combat_effect_arg",i[i.change_skill_effect_cost=105]="change_skill_effect_cost",i[i.change_accumulate_dam_rate=106]="change_accumulate_dam_rate",i[i.change_projectile_bank_data_addend=107]="change_projectile_bank_data_addend",i[i.change_identity_category=108]="change_identity_category",i))(ln||{}),z=(e=>(e[e.none=0]="none",e[e.hp=1]="hp",e[e.mp=2]="mp",e[e.str=3]="str",e[e.agi=4]="agi",e[e.int=5]="int",e[e.con=6]="con",e[e.str_x=7]="str_x",e[e.agi_x=8]="agi_x",e[e.int_x=9]="int_x",e[e.con_x=10]="con_x",e[e.criticalhit=15]="criticalhit",e[e.specialty=16]="specialty",e[e.oppression=17]="oppression",e[e.rapidity=18]="rapidity",e[e.endurance=19]="endurance",e[e.mastery=20]="mastery",e[e.criticalhit_x=21]="criticalhit_x",e[e.specialty_x=22]="specialty_x",e[e.oppression_x=23]="oppression_x",e[e.rapidity_x=24]="rapidity_x",e[e.endurance_x=25]="endurance_x",e[e.mastery_x=26]="mastery_x",e[e.max_hp=27]="max_hp",e[e.max_mp=28]="max_mp",e[e.max_hp_x=29]="max_hp_x",e[e.max_mp_x=30]="max_mp_x",e[e.max_hp_x_x=31]="max_hp_x_x",e[e.max_mp_x_x=32]="max_mp_x_x",e[e.normal_hp_recovery=33]="normal_hp_recovery",e[e.combat_hp_recovery=34]="combat_hp_recovery",e[e.normal_hp_recovery_rate=35]="normal_hp_recovery_rate",e[e.combat_hp_recovery_rate=36]="combat_hp_recovery_rate",e[e.normal_mp_recovery=37]="normal_mp_recovery",e[e.combat_mp_recovery=38]="combat_mp_recovery",e[e.normal_mp_recovery_rate=39]="normal_mp_recovery_rate",e[e.combat_mp_recovery_rate=40]="combat_mp_recovery_rate",e[e.self_recovery_rate=41]="self_recovery_rate",e[e.drain_hp_dam_rate=42]="drain_hp_dam_rate",e[e.drain_mp_dam_rate=43]="drain_mp_dam_rate",e[e.dam_reflection_rate=44]="dam_reflection_rate",e[e.char_attack_dam=47]="char_attack_dam",e[e.skill_effect_dam_addend=48]="skill_effect_dam_addend",e[e.attack_power_rate=49]="attack_power_rate",e[e.skill_damage_rate=50]="skill_damage_rate",e[e.attack_power_rate_x=51]="attack_power_rate_x",e[e.skill_damage_rate_x=52]="skill_damage_rate_x",e[e.cooldown_reduction=53]="cooldown_reduction",e[e.paralyzation_point_rate=54]="paralyzation_point_rate",e[e.def=55]="def",e[e.res=56]="res",e[e.def_x=57]="def_x",e[e.res_x=58]="res_x",e[e.def_x_x=59]="def_x_x",e[e.res_x_x=60]="res_x_x",e[e.def_pen_rate=67]="def_pen_rate",e[e.res_pen_rate=68]="res_pen_rate",e[e.physical_inc_rate=69]="physical_inc_rate",e[e.magical_inc_rate=70]="magical_inc_rate",e[e.self_shield_rate=71]="self_shield_rate",e[e.hit_rate=72]="hit_rate",e[e.dodge_rate=73]="dodge_rate",e[e.critical_hit_rate=74]="critical_hit_rate",e[e.critical_res_rate=75]="critical_res_rate",e[e.critical_dam_rate=76]="critical_dam_rate",e[e.attack_speed=77]="attack_speed",e[e.attack_speed_rate=78]="attack_speed_rate",e[e.move_speed=79]="move_speed",e[e.move_speed_rate=80]="move_speed_rate",e[e.prop_move_speed=81]="prop_move_speed",e[e.prop_move_speed_rate=82]="prop_move_speed_rate",e[e.vehicle_move_speed=83]="vehicle_move_speed",e[e.vehicle_move_speed_rate=84]="vehicle_move_speed_rate",e[e.ship_move_speed=85]="ship_move_speed",e[e.ship_move_speed_rate=86]="ship_move_speed_rate",e[e.fire_dam_rate=87]="fire_dam_rate",e[e.ice_dam_rate=88]="ice_dam_rate",e[e.electricity_dam_rate=89]="electricity_dam_rate",e[e.earth_dam_rate=91]="earth_dam_rate",e[e.dark_dam_rate=92]="dark_dam_rate",e[e.holy_dam_rate=93]="holy_dam_rate",e[e.elements_dam_rate=94]="elements_dam_rate",e[e.fire_res_rate=95]="fire_res_rate",e[e.ice_res_rate=96]="ice_res_rate",e[e.electricity_res_rate=97]="electricity_res_rate",e[e.earth_res_rate=99]="earth_res_rate",e[e.dark_res_rate=100]="dark_res_rate",e[e.holy_res_rate=101]="holy_res_rate",e[e.elements_res_rate=102]="elements_res_rate",e[e.self_cc_time_rate=105]="self_cc_time_rate",e[e.enemy_cc_time_rate=106]="enemy_cc_time_rate",e[e.identity_value1=107]="identity_value1",e[e.identity_value2=108]="identity_value2",e[e.identity_value3=109]="identity_value3",e[e.awakening_dam_rate=110]="awakening_dam_rate",e[e.item_drop_rate=111]="item_drop_rate",e[e.gold_rate=112]="gold_rate",e[e.exp_rate=113]="exp_rate",e[e.attack_power_addend=123]="attack_power_addend",e[e.attack_power_addend_2=124]="attack_power_addend_2",e[e.npc_species_humanoid_dam_rate=125]="npc_species_humanoid_dam_rate",e[e.npc_species_devil_dam_rate=126]="npc_species_devil_dam_rate",e[e.npc_species_substance_dam_rate=127]="npc_species_substance_dam_rate",e[e.npc_species_undead_dam_rate=128]="npc_species_undead_dam_rate",e[e.npc_species_plant_dam_rate=129]="npc_species_plant_dam_rate",e[e.npc_species_insect_dam_rate=130]="npc_species_insect_dam_rate",e[e.npc_species_spirit_dam_rate=131]="npc_species_spirit_dam_rate",e[e.npc_species_wild_beast_dam_rate=132]="npc_species_wild_beast_dam_rate",e[e.npc_species_mechanic_dam_rate=133]="npc_species_mechanic_dam_rate",e[e.npc_species_ancient_dam_rate=134]="npc_species_ancient_dam_rate",e[e.npc_species_god_dam_rate=135]="npc_species_god_dam_rate",e[e.npc_species_archfiend_dam_rate=136]="npc_species_archfiend_dam_rate",e[e.vitality=137]="vitality",e[e.ship_booter_speed=138]="ship_booter_speed",e[e.ship_wreck_speed_rate=139]="ship_wreck_speed_rate",e[e.island_speed_rate=140]="island_speed_rate",e[e.attack_power_sub_rate_1=141]="attack_power_sub_rate_1",e[e.attack_power_sub_rate_2=142]="attack_power_sub_rate_2",e[e.physical_inc_sub_rate_1=143]="physical_inc_sub_rate_1",e[e.physical_inc_sub_rate_2=144]="physical_inc_sub_rate_2",e[e.magical_inc_sub_rate_1=145]="magical_inc_sub_rate_1",e[e.magical_inc_sub_rate_2=146]="magical_inc_sub_rate_2",e[e.skill_damage_sub_rate_1=147]="skill_damage_sub_rate_1",e[e.skill_damage_sub_rate_2=148]="skill_damage_sub_rate_2",e[e.resource_recovery_rate=149]="resource_recovery_rate",e[e.weapon_dam=151]="weapon_dam",e))(z||{});var wn=require("tiny-typed-emitter");var L,X,N,g,bn,Y,dn,vn=class extends wn.TypedEmitter{constructor(a,s,n=!0,_=!!process.env.DEV){super();V(this,g);V(this,Y);F(this,"PartyStatusEffectRegistry");F(this,"LocalStatusEffectRegistry");V(this,L,void 0);V(this,X,void 0);V(this,N,void 0);F(this,"debug");F(this,"trace",!1);this.PartyStatusEffectRegistry=new Map,this.LocalStatusEffectRegistry=new Map,this.debug=_,en(this,L,a),en(this,X,s),en(this,N,n)}getStatusEffectRegistryForPlayer(a,s){let n=this.getPlayerRegistry(s),_=n.get(a);if(_)return _;let l=new Map;return n.set(a,l),l}hasStatusEffectRegistryForPlayer(a,s){return this.getPlayerRegistry(s).has(a)}getPlayerRegistry(a){switch(a){case 1:return this.LocalStatusEffectRegistry;case 0:return this.PartyStatusEffectRegistry;default:break}return this.LocalStatusEffectRegistry}RemoveLocalObject(a,s){let n=this.LocalStatusEffectRegistry.get(a);if(n)for(let[,_]of n)this.RemoveStatusEffect(a,_.instanceId,1,void 0,s);this.LocalStatusEffectRegistry.delete(a)}RemovePartyObject(a,s){let n=this.PartyStatusEffectRegistry.get(a);if(n)for(let[,_]of n)this.RemoveStatusEffect(a,_.instanceId,0,void 0,s);this.PartyStatusEffectRegistry.delete(a)}RegisterStatusEffect(a){let s=this.getStatusEffectRegistryForPlayer(a.targetId,a.type),n=s.get(a.instanceId);n?R(this,N)&&n.expirationTimer&&(clearTimeout(n.expirationTimer),n.expirationTimer=void 0):a.effectType===0&&this.emit("shieldApplied",a),s.set(a.instanceId,a),this.SetupStatusEffectTimeout(a)}HasAnyStatusEffect(a,s,n,_){if(!this.hasStatusEffectRegistryForPlayer(a,s))return!1;let l=this.getStatusEffectRegistryForPlayer(a,s);for(let[,d]of l)if(!(!R(this,N)&&!this.IsReplayStatusEffectValidElseRemove(d,_))){for(let c of n)if(c===d.statusEffectId)return!0}return!1}IsReplayStatusEffectValidElseRemove(a,s){return a.expireAt===void 0||a.expireAt.getTime()>s.getTime()?!0:(this.ExpireStatusEffectByTimeout(a),!1)}HasAnyStatusEffectFromParty(a,s,n,_,l){if(!this.hasStatusEffectRegistryForPlayer(a,s))return!1;let d=this.getStatusEffectRegistryForPlayer(a,s);for(let[,c]of d)if(!(!R(this,N)&&!this.IsReplayStatusEffectValidElseRemove(c,l))&&_.includes(c.statusEffectId)&&(this.ValidForWholeRaid(c)||R(this,L).getPartyIdFromEntityId(c.sourceId)===n))return!0;return!1}RemoveStatusEffect(a,s,n,_,l){if(!this.hasStatusEffectRegistryForPlayer(a,n))return;let d=this.getStatusEffectRegistryForPlayer(a,n),c=d.get(s);c&&(R(this,N)&&(clearTimeout(c.expirationTimer),c.expirationTimer=void 0),d.delete(s),_===4&&(R(this,N)||this.IsReplayStatusEffectValidElseRemove(c,l))&&this.RegisterValueUpdate(c,c.value,0))}GetStatusEffects(a,s,n){if(!this.hasStatusEffectRegistryForPlayer(a,s))return[];let _=this.getStatusEffectRegistryForPlayer(a,s);if(!R(this,N))for(let[,l]of _)this.IsReplayStatusEffectValidElseRemove(l,n);return[..._.values()]}GetStatusEffectsFromParty(a,s,n,_){if(!this.hasStatusEffectRegistryForPlayer(a,s))return[];let l=this.getStatusEffectRegistryForPlayer(a,s);if(!R(this,N))for(let[,d]of l)this.IsReplayStatusEffectValidElseRemove(d,_);return[...l.values()].filter(d=>this.ValidForWholeRaid(d)?!0:n===R(this,L).getPartyIdFromEntityId(d.sourceId))}Clear(a){let s=0;for(let[,_]of this.LocalStatusEffectRegistry){for(let[,l]of _)this.RemoveStatusEffect(l.targetId,l.instanceId,l.type,void 0,a);s+=_.size}let n=0;for(let[,_]of this.PartyStatusEffectRegistry){for(let[,l]of _)this.RemoveStatusEffect(l.targetId,l.instanceId,l.type,void 0,a);n+=_.size}this.trace&&console.log("On Clear SE in local",s,"in party",n),this.LocalStatusEffectRegistry.clear(),this.PartyStatusEffectRegistry.clear()}UpdateDuration(a,s,n,_){let d=this.getStatusEffectRegistryForPlayer(s,_).get(a);if(d){let c=n-d.timestamp;if(R(this,N)&&d.expirationTimer&&(this.trace&&console.log("Clearing timeout for",d.instanceId,"because of duration change"),clearTimeout(d.expirationTimer),d.expirationTimer=void 0),d.expireAt){let h=d.expireAt.getTime()+Number(c),v=h-d.pktTime.getTime();v>0?(this.trace&&console.log("Extending duration by",c,"ms","New timeout delay",v,"from",d.expireAt.toISOString(),"to",new Date(h).toISOString()),R(this,N)&&(d.expirationTimer=setTimeout(this.ExpireStatusEffectByTimeout.bind(this,d),v)),d.expireAt=new Date(h),d.timestamp=n):d.expireAt=void 0}}else this.debug&&console.error("Tried to update duration for SE with instanceId",a," on target",s,"but where is no such SE registered")}SyncStatusEffect(a,s,n,_,l){let d=W(this,Y,dn).call(this,s,l),c=d?0:1,h=d?s:n;if(!h)return;let m=this.getStatusEffectRegistryForPlayer(h,c).get(a);if(!m)return;let E=m.value;m.value=_,this.RegisterValueUpdate(m,E,_)}ValidForWholeRaid(a){return(a.buffCategory===3||a.buffCategory===1||a.buffCategory===2)&&a.category===1&&a.showType===1}SetupStatusEffectTimeout(a){if(a.expirationDelay>0&&a.expirationDelay<604800){let s=a.pktTime.getTime()>a.occurTime.getTime()?a.pktTime:a.occurTime,n=Math.ceil(a.expirationDelay*1e3),_=s.getTime()+n+vn.TIMEOUT_DELAY_MS-a.pktTime.getTime();a.expireAt=new Date(a.pktTime.getTime()+_),this.trace&&console.log("Setting up statuseffect expiration time for",a.name,a.instanceId,"to",a.expireAt.toISOString(),"with delay",_),R(this,N)&&(a.expirationTimer=setTimeout(this.ExpireStatusEffectByTimeout.bind(this,a),_))}}ExpireStatusEffectByTimeout(a){this.debug&&console.error("Triggered timeout on",a.name,"with iid",a.instanceId),this.RemoveStatusEffect(a.targetId,a.instanceId,a.type,void 0,new Date)}RegisterValueUpdate(a,s,n){a.effectType===0&&this.emit("shieldChanged",a,s,n)}newPC(a,s,n){let _=W(this,Y,dn).call(this,a.pcStruct.characterId,s);_?this.RemovePartyObject(a.pcStruct.characterId,n):this.RemoveLocalObject(a.pcStruct.playerId,n);for(let l of a.pcStruct.statusEffectDatas)this.RegisterStatusEffect(this.buildStatusEffect(l,_?a.pcStruct.characterId:a.pcStruct.playerId,l.sourceId,_?0:1,n))}buildStatusEffect(a,s,n,_,l){let d=a.value?a.value.readUInt32LE():0,c=a.value?a.value.readUInt32LE(8):0,h=d<c?d:c,v=0,m=0,E=0,A="Unknown",B=1,C=R(this,X).skillBuff.get(a.statusEffectId);if(C){switch(A=C.name,C.category){case"debuff":v=1;break}switch(C.buffcategory){case"bracelet":m=1;break;case"etc":m=2;break;case"battleitem":m=3;break}switch(C.iconshowtype){case"all":E=1;break}switch(C.type){case"shield":B=0;break}}return{instanceId:a.effectInstanceId,sourceId:n,statusEffectId:a.statusEffectId,targetId:s,type:_,dbTarget:C?.target??"none",value:h,buffCategory:m,category:v,showType:E,expirationDelay:a.totalTime,expirationTimer:void 0,timestamp:a.endTick,expireAt:void 0,occurTime:a.occurTime,name:A,pktTime:l,effectType:B,stackCount:a.stackCount}}getStatusEffects(a,s,n,_){let l=[],d=[],c=W(this,g,bn).call(this,a,n),h=this.GetStatusEffects(c?a.characterId:a.entityId,c?0:1,_);for(let v of h)d.push([v.statusEffectId,v.sourceId,v.stackCount]);if(s){let v=W(this,g,bn).call(this,s,n),m=R(this,L).isEntityInParty(a.entityId),E=m?R(this,L).getPartyIdFromEntityId(a.entityId):void 0,A=m&&E?this.GetStatusEffectsFromParty(v?s.characterId:s.entityId,v?0:1,E,_):this.GetStatusEffects(v?s.characterId:s.entityId,v?0:1,_);for(let B of A)B.type===1&&B.category===1&&B.sourceId!==a.entityId&&B.dbTarget==="self"||l.push([B.statusEffectId,B.sourceId,B.stackCount])}return[d,l]}},Q=vn;L=new WeakMap,X=new WeakMap,N=new WeakMap,g=new WeakSet,bn=function(a,s){if(a.entityType!==1)return!1;let n=a;return W(this,Y,dn).call(this,n.characterId,s)},Y=new WeakSet,dn=function(a,s){let n=R(this,L).isCharacterInParty(s),_=R(this,L).isCharacterInParty(a);if(n){if(!_||a===s)return!1;let l=R(this,L).getPartyIdFromCharacterId(s),d=R(this,L).getPartyIdFromCharacterId(a);return l===d}return!1},F(Q,"TIMEOUT_DELAY_MS",1e3);var un=class{#n;#e;#r;#a;entities=new Map;localPlayer;constructor(r,a,s,n){this.#n=r,this.#e=a,this.#r=s,this.#a=n,this.localPlayer={entityId:0n,entityType:1,name:"You",class:0,gearLevel:0,characterId:0n,stance:0,stats:new Map,skills:new Map}}processNewPC(r){let a=r.parsed;if(!a)return;let s={entityId:a.pcStruct.playerId,entityType:1,name:a.pcStruct.name,class:a.pcStruct.classId,gearLevel:a.pcStruct.maxItemLevel,characterId:a.pcStruct.characterId,stance:0,stats:this.#a.getStatPairMap(a.pcStruct.statPair),skills:new Map};this.entities.set(s.entityId,s);let n=this.#n.getEntityId(s.characterId);return n&&this.#e.changeEntityId(n,a.pcStruct.playerId),this.#n.addMapping(s.characterId,s.entityId),this.#e.completeEntry(s.characterId,s.entityId),this.#r.newPC(a,this.localPlayer.characterId,r.time),s}processInitEnv(r){let a=r.parsed;if(!a)return;this.localPlayer.entityId!==0n&&this.#e.changeEntityId(this.localPlayer.entityId,a.playerId),this.entities.clear();let s={entityId:a.playerId,entityType:1,name:this.localPlayer.name,class:this.localPlayer.class,gearLevel:this.localPlayer.gearLevel,characterId:this.localPlayer.characterId,stance:this.localPlayer.stance,stats:this.localPlayer.stats,skills:this.localPlayer.skills};this.localPlayer=s,this.entities.set(s.entityId,s),this.#n.clear(),this.#r.Clear(r.time),s.characterId!==0n&&this.#n.addMapping(s.characterId,s.entityId),this.localPlayer&&this.localPlayer.characterId&&this.localPlayer.characterId>0n&&this.#e.completeEntry(this.localPlayer.characterId,a.playerId)}processInitPC(r){let a=r.parsed;if(!a)return;this.entities.clear();let s={entityId:a.playerId,entityType:1,name:a.name,class:a.classId,gearLevel:a.gearLevel,characterId:a.characterId,stance:0,stats:this.#a.getStatPairMap(a.statPair),skills:new Map};this.localPlayer=s,this.entities.set(s.entityId,s),this.#n.addMapping(s.characterId,s.entityId),this.#e.setOwnName(a.name),this.#e.completeEntry(s.characterId,a.playerId),this.#r.RemoveLocalObject(a.playerId,r.time);for(let n of a.statusEffectDatas){let _=this.getSourceEntity(n.sourceId);this.#r.RegisterStatusEffect(this.#r.buildStatusEffect(n,a.playerId,_.entityId,1,r.time))}return s}processNewNpc(r){let a=r.parsed;if(!a)return;let s=!1,n=this.#a.npc.get(a.npcStruct.typeId);n&&[6,7,9,10].includes(tn[n.grade])&&(s=!0);let _={entityId:a.npcStruct.objectId,entityType:2,name:n?.name??a.npcStruct.objectId.toString(16),typeId:a.npcStruct.typeId,isBoss:s,grade:n?.grade??"none",pushimmune:n?.pushimmune??!1,stats:this.#a.getStatPairMap(a.npcStruct.statPair),level:a.npcStruct.level,balanceLevel:a.npcStruct.balanceLevel??a.npcStruct.level},l=this.#a.getNpcEsther(a.npcStruct.typeId);l!==void 0&&(_.entityType=4,_.name=l.name,_.icon=l.icon),this.entities.set(_.entityId,_),this.#r.RemoveLocalObject(a.npcStruct.objectId,r.time);for(let d of a.npcStruct.statusEffectDatas){let c=this.getSourceEntity(d.sourceId);this.#r.RegisterStatusEffect(this.#r.buildStatusEffect(d,a.npcStruct.objectId,c.entityId,1,r.time))}return _}processNewNpcSummon(r){let a=r.parsed;if(!a)return;let s=!1,n=this.#a.npc.get(a.npcData.typeId);n&&["boss","raid","epic_raid","commander"].includes(n.grade)&&(s=!0);let _={entityId:a.npcData.objectId,entityType:3,name:n?.name??a.npcData.objectId.toString(16),ownerId:a.ownerId,typeId:a.npcData.typeId,isBoss:s,grade:n?.grade??"none",pushimmune:n?.pushimmune??!1,stats:this.#a.getStatPairMap(a.npcData.statPair),level:a.npcData.level,balanceLevel:a.npcData.balanceLevel??a.npcData.level};this.#r.RemoveLocalObject(a.npcData.objectId,r.time);for(let l of a.npcData.statusEffectDatas){let d=this.getSourceEntity(l.sourceId);this.#r.RegisterStatusEffect(this.#r.buildStatusEffect(l,a.npcData.objectId,d.entityId,1,r.time))}return this.entities.set(_.entityId,_),_}getPlayerSetOptions(r){let a=new Map;r.forEach(n=>{if(n.id&&n.slot&&n.slot>=1&&n.slot<=6){let _=this.#a.itemSet.items.get(n.id);if(_){let l=a.get(_.setname);l||(l=new Map,a.set(_.setname,l)),l.set(_.level,(l.get(_.level)??0)+1)}}});let s=[];return a.forEach((n,_)=>{let l=this.#a.itemSet.seteffects.get(_);if(!l)return;let d=0,c=0;for(let[h,v]of[...n.entries()].sort((m,E)=>E[0]-m[0])){let m=l.get(h);if(!m)return;for(let[E,A]of[...m.entries()])E>d&&v+c>=E&&(s.push(...A.options),d=Math.max(d,E));c=v}}),s}getSourceEntity(r){let a=this.entities.get(r);if((a?.entityType===5||a?.entityType===3)&&(r=a.ownerId),a=this.entities.get(r),a)return a;let s={entityId:r,entityType:2,name:r.toString(16),stats:new Map};return this.entities.set(r,s),s}guessIsPlayer(r,a){let s=this.#a.getSkillClassId(a);if(s!==0){let n;if(r.entityType===1){let _=r;if(_.class===s)return _;n={entityId:_.entityId,entityType:1,name:_.name,class:s,gearLevel:_.gearLevel,characterId:_.characterId,stance:_.stance,stats:_.stats,skills:new Map}}else n={entityId:r.entityId,entityType:1,name:r.name,class:s,gearLevel:0,characterId:0n,stance:0,stats:new Map,skills:new Map};return this.entities.set(r.entityId,n),n}return r}getOrCreateEntity(r){let a=this.entities.get(r);return a||(a={entityId:r,entityType:0,name:r.toString(16),stats:new Map},this.entities.set(r,a)),a}};var Pn=require("tiny-typed-emitter");var An={isLive:!0,dontResetOnZoneChange:!1,resetAfterPhaseTransition:!1,splitOnPhaseTransition:!1},hn=class extends Pn.TypedEmitter{#n;encounters;#e;#r;#a;options;resetTimer;phaseTransitionResetRequest;phaseTransitionResetRequestTime;#i;constructor(r,a,s,n){super(),this.#e=r,this.#r=a,this.#a=s,this.options={...An,...n},this.resetTimer=null,this.phaseTransitionResetRequest=!1,this.phaseTransitionResetRequestTime=0,this.#i=new Map,this.encounters=[],this.#n={startedOn:0,lastCombatPacket:0,fightStartedOn:0,localPlayer:this.#e.localPlayer.name,currentBoss:void 0,entities:new Map,damageStatistics:{totalDamageDealt:0,topDamageDealt:0,totalDamageTaken:0,topDamageTaken:0,totalHealingDone:0,topHealingDone:0,totalShieldDone:0,topShieldDone:0,debuffs:new Map,buffs:new Map,topShieldGotten:0,totalEffectiveShieldingDone:0,topEffectiveShieldingDone:0,topEffectiveShieldingUsed:0,effectiveShieldingBuffs:new Map,appliedShieldingBuffs:new Map}}}onCounterAttack(r,a){let s=this.updateEntity(r,{},a);s.hits.counter+=1}onInitEnv(r,a){this.options.isLive?(this.#n.entities.forEach((s,n,_)=>{s.hits.total===0&&_.delete(n)}),this.options.dontResetOnZoneChange===!1&&this.resetTimer===null&&(this.resetTimer=setTimeout(()=>{this.resetState(+a+6e3)},6e3),this.emit("message","new-zone"))):(this.splitEncounter(a),this.emit("message","new-zone"))}splitEncounter(r){if(this.#n.fightStartedOn!==0&&(this.#n.damageStatistics.totalDamageDealt!==0||this.#n.damageStatistics.totalDamageTaken!==0)){let a=structuredClone(this.#n);this.applyBreakdowns(a.entities),this.encounters.push(a)}this.resetState(+r)}getBossIfStillExist(){if(this.#n.currentBoss?.id){let r=BigInt(`0x0${this.#n.currentBoss?.id}`);return this.#e.entities.has(r)?this.#n.currentBoss:void 0}}resetState(r){this.cancelReset(),this.resetBreakdowns(),this.#n={startedOn:+r,lastCombatPacket:+r,fightStartedOn:0,localPlayer:this.#e.localPlayer.name,currentBoss:this.getBossIfStillExist(),entities:new Map,damageStatistics:{totalDamageDealt:0,topDamageDealt:0,totalDamageTaken:0,topDamageTaken:0,totalHealingDone:0,topHealingDone:0,totalShieldDone:0,topShieldDone:0,debuffs:new Map,buffs:new Map,appliedShieldingBuffs:new Map,effectiveShieldingBuffs:new Map,topEffectiveShieldingDone:0,topEffectiveShieldingUsed:0,topShieldGotten:0,totalEffectiveShieldingDone:0}},this.emit("reset-state",this.#n)}cancelReset(){this.resetTimer&&clearTimeout(this.resetTimer),this.resetTimer=null}onPhaseTransition(r,a){this.options.isLive&&(this.emit("message",`phase-transition-${r}`),this.options.resetAfterPhaseTransition&&(this.phaseTransitionResetRequest=!0,this.phaseTransitionResetRequestTime=+a)),!this.options.isLive&&this.options.splitOnPhaseTransition&&this.splitEncounter(a)}updateOptions(r){this.options={...this.options,...r}}onDeath(r,a){let s=this.#n.entities.get(r.name),n=0;s?s.isDead?n=s.deaths:n=s.deaths+1:n=1,this.updateEntity(r,{isDead:!0,deathTime:+a,deaths:n},a)}onDamage(r,a,s,n,_,l){if((n.modifier&15)===11&&n.skillId===0&&n.skillEffectId===0)return;this.phaseTransitionResetRequest&&this.phaseTransitionResetRequestTime>0&&this.phaseTransitionResetRequestTime<+l-8e3&&(this.resetState(+l),this.phaseTransitionResetRequest=!1);let[d,c]=this.#r.getStatusEffects(r,s,this.#e.localPlayer.characterId,l);if(this.#a.isBattleItem(n.skillEffectId,"attack")&&a&&a.entityType===5){let M=a;n.skillEffectId=M.skillEffectId}let h=this.updateEntity(r,{},l),v=this.updateEntity(s,{currentHp:n.targetCurHp,maxHp:n.targetMaxHp},l);if(!h||!v)return;!v.isPlayer&&n.targetCurHp<0&&(n.damage=n.damage+n.targetCurHp);let m=n.skillId;n.skillId===0&&n.skillEffectId!==0&&(m=n.skillEffectId);let E=h.skills.get(m);E||(E={...this.createEntitySkill(),id:m,...this.getSkillNameIcon(n.skillId,n.skillEffectId)},h.skills.set(m,E));let A=n.modifier&15,B=(n.modifier>>4&7)-1,C=(A&9)!==0,O=new Set,Z=new Set;d.forEach(([M])=>{O.add(M)}),c.forEach(([M])=>{Z.add(M)}),E.damageInfo.damageDealt+=n.damage,n.damage>E.maxDamage&&(E.maxDamage=n.damage),h.hits.total+=1,E.hits.total+=1,h.damageInfo.damageDealt+=n.damage,v.damageTaken+=n.damage;let fn=C?1:0;h.hits.crit+=fn,E.hits.crit+=fn;let y=!1,nn=!1,an=this.#a.getSkillEffectDirectionalMask(n.skillEffectId)-1;if(an===0||an===2){nn=B===0;let M=nn?1:0;h.hits.backAttack+=M,h.hits.totalBackAttack+=1,E.hits.backAttack+=M,E.hits.totalBackAttack+=1}if(an===1||an===2){y=B===1;let M=y?1:0;h.hits.frontAttack+=M,h.hits.totalFrontAttack+=1,E.hits.frontAttack+=M,E.hits.totalFrontAttack+=1}if(h.isPlayer){this.#n.damageStatistics.totalDamageDealt+=n.damage,this.#n.damageStatistics.topDamageDealt=Math.max(this.#n.damageStatistics.topDamageDealt,h.damageInfo.damageDealt);let M=!1,G=!1;O.forEach(o=>{if(!this.#n.damageStatistics.buffs.has(o)){let q=this.#a.getStatusEffectHeaderData(o);q&&this.#n.damageStatistics.buffs.set(o,q)}let x=this.#n.damageStatistics.buffs.get(o);x&&!M&&(M=(x.buffcategory==="classskill"||x.buffcategory==="identity"||x.buffcategory==="ability")&&x.source.skill!==void 0&&x.target===1&&this.#a.isSupportClassId(x.source.skill.classid));let K=E.damageDealtBuffedBy.get(o)??0;E.damageDealtBuffedBy.set(o,K+n.damage);let J=h.damageDealtBuffedBy.get(o)??0;h.damageDealtBuffedBy.set(o,J+n.damage);let j=h.hits.hitsBuffedBy.get(o)??0;h.hits.hitsBuffedBy.set(o,j+1);let $=E.hits.hitsBuffedBy.get(o)??0;E.hits.hitsBuffedBy.set(o,$+1)}),Z.forEach(o=>{if(!this.#n.damageStatistics.debuffs.has(o)){let q=this.#a.getStatusEffectHeaderData(o);q&&this.#n.damageStatistics.debuffs.set(o,q)}let x=this.#n.damageStatistics.debuffs.get(o);x&&!G&&(G=(x.buffcategory==="classskill"||x.buffcategory==="identity"||x.buffcategory==="ability")&&x.source.skill!==void 0&&x.target===1&&this.#a.isSupportClassId(x.source.skill.classid));let K=E.damageDealtDebuffedBy.get(o)??0;E.damageDealtDebuffedBy.set(o,K+n.damage);let J=h.damageDealtDebuffedBy.get(o)??0;h.damageDealtDebuffedBy.set(o,J+n.damage);let j=h.hits.hitsDebuffedBy.get(o)??0;h.hits.hitsDebuffedBy.set(o,j+1);let $=E.hits.hitsDebuffedBy.get(o)??0;E.hits.hitsDebuffedBy.set(o,$+1)});let t=G?1:0,In=M?1:0;if(E.damageInfo.damageDealtBuffedBySupport+=M?n.damage:0,E.damageInfo.damageDealtDebuffedBySupport+=G?n.damage:0,h.damageInfo.damageDealtBuffedBySupport+=M?n.damage:0,h.damageInfo.damageDealtDebuffedBySupport+=G?n.damage:0,h.hits.hitsBuffedBySupport+=In,h.hits.hitsDebuffedBySupport+=t,E.hits.hitsBuffedBySupport+=In,E.hits.hitsDebuffedBySupport+=t,n.damage>0&&h.isPlayer){let o={multDmg:{sumRate:0,totalRate:1,values:Array()},addDmg:{sumRate:0,values:Array()},crit:{sumRate:0,values:Array()},critDmgRate:2};if(d.forEach(([D,p,w])=>{let P=this.#e.entities.get(p);if(!P)return;let b=this.getBuffAfterTripods(this.#a.skillBuff.get(D),P,n);if(b){if(b.type==="skill_damage_amplify"&&b.statuseffectvalues&&P.entityType===1&&p!==r.entityId){let I=b.statuseffectvalues[0]??0,S=b.statuseffectvalues[4]??0;if((I===0||I===n.skillId)&&(S===0||S===n.skillEffectId)){let k=b.statuseffectvalues[1]??0;if(k!==0){let T=k/1e4*w;o.multDmg.values.push({casterEntity:P,rate:T}),o.multDmg.sumRate+=T,o.multDmg.totalRate*=1+T}}}else b.type==="attack_power_amplify"&&b.statuseffectvalues&&P.entityType===1&&r.entityId;b.passiveoption.forEach(I=>{if(H[I.type]===2)if(P.entityType===1&&p!==r.entityId)if(I.keystat==="critical_hit_rate"){let S=I.value;if(S!==0){let k=S/1e4*w;o.crit.values.push({casterEntity:P,rate:k}),o.crit.sumRate+=k}}else if(I.keystat==="attack_power_sub_rate_2"){let S=I.value;if(S!==0){let k=S/1e4*w;o.addDmg.values.push({casterEntity:P,rate:k}),o.addDmg.sumRate+=k}}else if(I.keystat==="skill_damage_sub_rate_2"){let S=I.value;if(S!==0){let k=S/1e4*w;o.multDmg.values.push({casterEntity:P,rate:k}),o.multDmg.sumRate+=k,o.multDmg.totalRate*=1+k}}else I.keystat;else I.keystat==="critical_dam_rate"&&b.category==="buff"&&(o.critDmgRate+=I.value/1e4*w);else if(H[I.type]===4){let S=this.#a.combatEffect.get(I.keyindex);o.critDmgRate+=w*this.getCritMultiplierFromCombatEffect(S,{self:r,target:s,caster:P,skill:this.#a.skill.get(m),hitOption:B,targetCount:_})}})}}),c.forEach(([D,p,w])=>{let P=this.#e.entities.get(p);if(!P||P.entityType!==1||p===r.entityId)return;let b=this.getBuffAfterTripods(this.#a.skillBuff.get(D),P,n);if(b){if(b.type==="instant_stat_amplify"&&b.statuseffectvalues){let I=b.statuseffectvalues[0]??0;if(I!==0){let S=I/1e4*w;o.crit.values.push({casterEntity:P,rate:S}),o.crit.sumRate+=S}if(n.damageType===0){let S=b.statuseffectvalues[2]??0;if(S!==0){let T=-(S/1e4)*w*.5;o.multDmg.values.push({casterEntity:P,rate:T}),o.multDmg.sumRate+=T,o.multDmg.totalRate*=1+T}let k=b.statuseffectvalues[7]??0;if(k!==0){let T=k/1e4*w;o.multDmg.values.push({casterEntity:P,rate:T}),o.multDmg.sumRate+=T,o.multDmg.totalRate*=1+T}}else if(n.damageType===1){let S=b.statuseffectvalues[3]??0;if(S!==0){let T=-(S/1e4)*w*.5;o.multDmg.values.push({casterEntity:P,rate:T}),o.multDmg.sumRate+=T,o.multDmg.totalRate*=1+T}let k=b.statuseffectvalues[8]??0;if(k!==0){let T=k/1e4*w;o.multDmg.values.push({casterEntity:P,rate:T}),o.multDmg.sumRate+=T,o.multDmg.totalRate*=1+T}}}if(b.type==="skill_damage_amplify"&&b.statuseffectvalues){let I=b.statuseffectvalues[0]??0,S=b.statuseffectvalues[4]??0;if((I===0||I===n.skillId)&&(S===0||S===n.skillEffectId)){let k=b.statuseffectvalues[1]??0;if(k!==0){let T=k/1e4*w;o.multDmg.values.push({casterEntity:P,rate:T}),o.multDmg.sumRate+=T,o.multDmg.totalRate*=1+T}}}if(b.type==="directional_attack_amplify"&&b.statuseffectvalues){if(y){let I=b.statuseffectvalues[0]??0;if(I!==0){let S=I/1e4*w;o.multDmg.values.push({casterEntity:P,rate:S}),o.multDmg.sumRate+=S,o.multDmg.totalRate*=1+S}}if(nn){let I=b.statuseffectvalues[4]??0;if(I!==0){let S=I/1e4*w;o.multDmg.values.push({casterEntity:P,rate:S}),o.multDmg.sumRate+=S,o.multDmg.totalRate*=1+S}}}}}),o.crit.values.length>0){let D=this.#a.skill.get(n.skillId);r.itemSet?.forEach(p=>{if(H[p.type]===2&&z[p.keystat]===76)o.critDmgRate+=p.value/1e4;else if(H[p.type]===4){let w=this.#a.combatEffect.get(p.keyindex);o.critDmgRate+=this.getCritMultiplierFromCombatEffect(w,{self:r,target:s,caster:r,skill:D,hitOption:B,targetCount:_})}r.skills.get(n.skillId)?.tripods.forEach(w=>{let P=new Map;w.options.forEach(b=>{let I=ln[b.type];if(I===45){if((b.params[0]??0)===0||n.skillEffectId===(b.params[0]??0)){let S=b.params[1];if(S){let k=this.#a.combatEffect.get(S);k&&P.set(k.id,k)}}}else if(I===46)P.delete(b.params[0]??0);else if(I===104){if((b.params[0]??0)===0||n.skillEffectId===(b.params[0]??0)){let S=P.get(b.params[1]??0);if(S){let k=structuredClone(S);P.set(S.id,k),k.effects.forEach(T=>{T.actions.forEach(pn=>{for(let U=0;U<b.params.length-2;U++)rn[b.paramtype]===1?pn.args[U]*=1+(b.params[U+2]??0)/100:pn.args[U]+=b.params[U+2]??0})})}}}else I===29&&((b.params[0]??0)===0||n.skillEffectId===(b.params[0]??0))&&(o.critDmgRate+=(b.params[1]??0)/1e4)}),P.forEach(b=>{o.critDmgRate+=this.getCritMultiplierFromCombatEffect(b,{self:r,target:s,caster:r,skill:D,hitOption:B,targetCount:_})})})})}let x=0;if(o.crit.values.length>0){let D,p;C?(D=n.damage,p=D/o.critDmgRate):(p=n.damage,D=p*o.critDmgRate),x=(D-p)/D*o.crit.sumRate}let K=(1+x)*(1+o.addDmg.sumRate)*o.multDmg.totalRate-1,J=x+o.addDmg.sumRate+(o.multDmg.totalRate-1),j=K*n.damage/J,$=x*j/o.crit.sumRate;o.crit.values.forEach(D=>{let p=D.rate*$,w=this.#n.entities.get(D.casterEntity.name);w&&(w.damageInfo.rdpsDamageGiven+=p),h.damageInfo.rdpsDamageReceived+=p,E.damageInfo.rdpsDamageReceived+=p}),o.addDmg.values.forEach(D=>{let p=D.rate*j,w=this.#n.entities.get(D.casterEntity.name);w&&(w.damageInfo.rdpsDamageGiven+=p),h.damageInfo.rdpsDamageReceived+=p,E.damageInfo.rdpsDamageReceived+=p});let q=(o.multDmg.totalRate-1)*j/o.multDmg.sumRate;o.multDmg.values.forEach(D=>{let p=D.rate*q,w=this.#n.entities.get(D.casterEntity.name);w&&(w.damageInfo.rdpsDamageGiven+=p),h.damageInfo.rdpsDamageReceived+=p,E.damageInfo.rdpsDamageReceived+=p})}let Tn={timestamp:+l,damage:n.damage,targetEntity:v.id,isCrit:C,isBackAttack:nn,isFrontAttack:y,isBuffedBySupport:M,isDebuffedBySupport:G,buffedBy:[...O],debuffedBy:[...Z]},Dn=BigInt("0x"+h.id);this.addBreakdown(Dn,m,Tn)}v.isPlayer&&(this.#n.damageStatistics.totalDamageTaken+=n.damage,this.#n.damageStatistics.topDamageTaken=Math.max(this.#n.damageStatistics.topDamageTaken,v.damageTaken)),v.isBoss&&(this.#n.currentBoss=v),this.#n.fightStartedOn===0&&(this.#n.fightStartedOn=+l),this.#n.lastCombatPacket=+l}getBuffAfterTripods(r,a,s){if(!r||a.entityType!==1)return r;let n=structuredClone(r);return a.skills.get(s.skillId)?.tripods.forEach(_=>{_.options.forEach(l=>{let d=ln[l.type];if(d===19){if(((l.params[0]??0)===0||s.skillEffectId===(l.params[0]??0))&&n.id===(l.params[1]??0)){let c=new Map;for(let h=2;h<l.params.length;h+=2)l.params[h]&&l.params[h+1]&&c.set(l.params[h]??0,l.params[h+1]??0);n.passiveoption.forEach(h=>{let v=c.get(z[h.keystat]);H[h.type]===2&&v&&(rn[l.paramtype]===0?h.value+=v:h.value*=1+v/100)})}}else if(d===42){if(((l.params[0]??0)===0||s.skillEffectId===(l.params[0]??0))&&n.id===(l.params[1]??0)){let c=z[l.params[2]??0],h=l.params[3]??0;c&&h!==void 0&&n.passiveoption.push({type:"stat",keystat:c,keyindex:0,value:h})}}else if(d===21&&n.statuseffectvalues&&((l.params[0]??0)===0||s.skillEffectId===(l.params[0]??0))&&n.id===(l.params[1]??0))if((l.paramtype[2]??0)===0)n.statuseffectvalues=l.params.slice(3);else{let c=[];for(let h=0;h<Math.max(n.statuseffectvalues.length,l.params.length-3);h++)l.params[h+3]&&c.push((n.statuseffectvalues[h]??0)*(1+(l.params[h+3]??0)/100));n.statuseffectvalues=c}})}),n}getCritMultiplierFromCombatEffect(r,a){if(!r)return 0;let s=0;return r.effects.filter(n=>n.actions.find(_=>sn[_.type]===4)).forEach(n=>{this.#a.isCombatEffectConditionsValid({effect:n,...a})&&n.actions.filter(_=>sn[_.type]===4).forEach(_=>{s+=(_.args[0]??0)/100})}),s}onStartSkill(r,a,s){let n=this.updateEntity(r,{isDead:!1},s);if(n){n.hits.casts+=1;let _=n.skills.get(a);_||(_={...this.createEntitySkill(),id:a,...this.getSkillNameIcon(a,0)},n.skills.set(a,_)),_.hits.casts+=1}}onShieldUsed(r,a,s,n){if(n<0&&console.error("Shield change values was negative, shield ammount increased"),r.entityType===1&&a.entityType===1){if(!this.#n.damageStatistics.effectiveShieldingBuffs.has(s)){let v=this.#a.getStatusEffectHeaderData(s);v&&this.#n.damageStatistics.effectiveShieldingBuffs.set(s,v)}let _=new Date,l=this.updateEntity(r,{},_),d=this.updateEntity(a,{},_);l.damagePreventedByShield+=n;let c=l.damagePreventedByShieldBy.get(s)??0;l.damagePreventedByShieldBy.set(s,c+n),this.#n.damageStatistics.topEffectiveShieldingUsed=Math.max(l.damagePreventedByShield,this.#n.damageStatistics.topEffectiveShieldingUsed),d.damagePreventedWithShieldOnOthers+=n;let h=d.damagePreventedWithShieldOnOthersBy.get(s)??0;d.damagePreventedWithShieldOnOthersBy.set(s,h+n),this.#n.damageStatistics.topEffectiveShieldingDone=Math.max(d.damagePreventedWithShieldOnOthers,this.#n.damageStatistics.topEffectiveShieldingDone),this.#n.damageStatistics.totalEffectiveShieldingDone+=n}}onShieldApplied(r,a,s,n){let _=new Date,l=this.updateEntity(r,{},_),d=this.updateEntity(a,{},_);if(d.isPlayer&&l.isPlayer){if(!this.#n.damageStatistics.appliedShieldingBuffs.has(s)){let v=this.#a.getStatusEffectHeaderData(s);v&&this.#n.damageStatistics.appliedShieldingBuffs.set(s,v)}l.shieldReceived+=n,d.shieldDone+=n;let c=d.shieldDoneBy.get(s)??0;d.shieldDoneBy.set(s,c+n);let h=l.shieldReceivedBy.get(s)??0;l.shieldReceivedBy.set(s,h+n),this.#n.damageStatistics.topShieldDone=Math.max(d.shieldDone,this.#n.damageStatistics.topShieldDone),this.#n.damageStatistics.topShieldGotten=Math.max(l.shieldReceived,this.#n.damageStatistics.topShieldGotten),this.#n.damageStatistics.totalShieldDone+=n}}getSkillNameIcon(r,a){if(r===0&&a===0)return{name:"Bleed",icon:"buff_168.png"};if(r===0){let s=this.#a.skillEffect.get(a);if(s&&s.itemname)return{name:s.itemname,icon:s.icon??""};if(s){if(s.sourceskill){let n=this.#a.skill.get(s.sourceskill);if(n)return{name:n.name,icon:n.icon}}else{let n=this.#a.skill.get(Math.floor(a/10));if(n)return{name:n.name,icon:n.icon}}return{name:s.comment}}else return{name:this.#a.getSkillName(r)}}else{let s=this.#a.skill.get(r);return!s&&(s=this.#a.skill.get(r-r%10),!s)?{name:this.#a.getSkillName(r),icon:""}:s.summonsourceskill?(s=this.#a.skill.get(s.summonsourceskill),s?{name:s.name+" (Summon)",icon:s.icon}:{name:this.#a.getSkillName(r),icon:""}):s.sourceskill?(s=this.#a.skill.get(s.sourceskill),s?{name:s.name,icon:s.icon}:{name:this.#a.getSkillName(r),icon:""}):{name:s.name,icon:s.icon}}}updateEntity(r,a,s){let n={lastUpdate:+s},_=this.#n.entities.get(r.name),l={};if(!_||r.entityType===1&&_.isPlayer!==!0){if(r.entityType===1){let d=r;l={classId:d.class,gearScore:d.gearLevel,isPlayer:!0}}else if(r.entityType===2||r.entityType===3){let d=r;l={npcId:d.typeId,isBoss:d.isBoss}}else if(r.entityType===4){let d=r;l={npcId:d.typeId,isBoss:d.isBoss,isEsther:!0,icon:d.icon}}}return _?Object.assign(_,a,n,l):(_={...this.createEntity(),...a,...n,...l,name:r.name,id:r.entityId.toString(16)},this.#n.entities.set(r.name,_)),_}updateOrCreateEntity(r,a,s){if(!(!a.name||!a.id)){for(let[n,_]of this.#n.entities)if(a.id===_.id){this.#n.entities.delete(n),this.updateEntity(r,{..._,...a},s);return}this.updateEntity(r,a,s)}}createEntitySkill(){return{id:0,name:"",icon:"",damageInfo:{damageDealt:0,rdpsDamageReceived:0,rdpsDamageGiven:0,damageDealtDebuffedBySupport:0,damageDealtBuffedBySupport:0},maxDamage:0,hits:{casts:0,total:0,crit:0,backAttack:0,totalBackAttack:0,frontAttack:0,totalFrontAttack:0,counter:0,hitsDebuffedBySupport:0,hitsBuffedBySupport:0,hitsBuffedBy:new Map,hitsDebuffedBy:new Map},breakdown:[],damageDealtDebuffedBy:new Map,damageDealtBuffedBy:new Map}}createEntity(){return{lastUpdate:0,id:"",npcId:0,name:"",classId:0,isBoss:!1,isPlayer:!1,isDead:!1,deaths:0,deathTime:0,gearScore:0,currentHp:0,maxHp:0,damageInfo:{damageDealt:0,rdpsDamageReceived:0,rdpsDamageGiven:0,damageDealtDebuffedBySupport:0,damageDealtBuffedBySupport:0},healingDone:0,shieldDone:0,damageTaken:0,skills:new Map,hits:{casts:0,total:0,crit:0,backAttack:0,totalBackAttack:0,frontAttack:0,totalFrontAttack:0,counter:0,hitsDebuffedBySupport:0,hitsBuffedBySupport:0,hitsBuffedBy:new Map,hitsDebuffedBy:new Map},damageDealtDebuffedBy:new Map,damageDealtBuffedBy:new Map,damagePreventedByShieldBy:new Map,damagePreventedWithShieldOnOthersBy:new Map,shieldDoneBy:new Map,shieldReceivedBy:new Map,damagePreventedWithShieldOnOthers:0,damagePreventedByShield:0,shieldReceived:0}}getBroadcast(){let r={...this.#n};return r.entities=new Map,this.#n.entities.forEach((a,s)=>{!a.isPlayer&&!a.isEsther||r.entities.set(s,{...a})}),r.localPlayer=this.#e.localPlayer.name,r}resetBreakdowns(){this.#i.clear()}createBreakdownEntity(r){return this.#i.has(r)||this.#i.set(r,new Map),this.#i.get(r)}removeBreakdownEntry(r){this.#i.delete(r)}addBreakdown(r,a,s){let n=this.createBreakdownEntity(r);if(n.has(a))n.get(a).push(s);else{let _=new Array(s);n.set(a,_)}}getBreakdowns(r,a){let s=this.#i.get(r);if(s)return s.get(a)}clearBreakdowns(r,a){let s=this.#i.get(r);s&&s.delete(a)}applyBreakdowns(r,a=!0){r.forEach(s=>{s.skills.forEach(n=>{let _=BigInt("0x"+s.id),l=this.getBreakdowns(_,n.id);l&&(n.breakdown=[...l])})}),a&&this.resetBreakdowns()}};var on=class{characterIdToPartyId;entityIdToPartyId;raidInstanceToPartyInstances;ownName;characterNameToCharacterId;#n;constructor(r){this.characterIdToPartyId=new Map,this.entityIdToPartyId=new Map,this.raidInstanceToPartyInstances=new Map,this.characterNameToCharacterId=new Map,this.#n=r}add(r,a,s=void 0,n=void 0,_=void 0){!s&&!n||(s&&!n&&(n=this.#n.getEntityId(s)),n&&!s&&(s=this.#n.getEntityId(n)),s&&this.characterIdToPartyId.set(s,a),n&&this.entityIdToPartyId.set(n,a),_&&s&&this.characterNameToCharacterId.set(_,s),this.registerPartyId(r,a))}completeEntry(r,a){let s=this.getPartyIdFromCharacterId(r),n=this.getPartyIdFromEntityId(a);s&&n||(!s&&n&&this.characterIdToPartyId.set(r,n),!n&&s&&this.entityIdToPartyId.set(a,s))}changeEntityId(r,a){let s=this.getPartyIdFromEntityId(r);s&&(this.entityIdToPartyId.delete(r),this.entityIdToPartyId.set(a,s))}setOwnName(r){this.ownName=r}remove(r,a){if(a===this.ownName){this.removePartyMappings(r);return}let s=this.characterNameToCharacterId.get(a);if(this.characterNameToCharacterId.delete(a),!s)return;this.characterIdToPartyId.delete(s);let n=this.#n.getEntityId(s);n&&this.characterIdToPartyId.delete(n)}isCharacterInParty(r){return this.characterIdToPartyId.has(r)}isEntityInParty(r){return this.entityIdToPartyId.has(r)}getPartyIdFromCharacterId(r){return this.characterIdToPartyId.get(r)}getPartyIdFromEntityId(r){return this.entityIdToPartyId.get(r)}removePartyMappings(r){let a=this.getRaidInstanceId(r),s=a?this.raidInstanceToPartyInstances.get(a)??new Set([r]):new Set([r]);for(let[n,_]of this.characterIdToPartyId)if(s.has(_)){this.characterIdToPartyId.delete(n);for(let[l,d]of this.characterNameToCharacterId)if(n===d){this.characterNameToCharacterId.delete(l);break}}for(let[n,_]of this.entityIdToPartyId)s.has(_)&&this.entityIdToPartyId.delete(n)}getRaidInstanceId(r){for(let a of this.raidInstanceToPartyInstances)if(a[1].has(r))return a[0]}registerPartyId(r,a){let s=this.raidInstanceToPartyInstances.get(r);s||(s=new Set,this.raidInstanceToPartyInstances.set(r,s)),s.add(a)}partyInfo(r,a,s){let n=r.parsed;if(n){if(n.memberDatas.length===1&&n.memberDatas[0]?.name===s.name){this.remove(n.partyInstanceId,n.memberDatas[0].name);return}this.removePartyMappings(n.partyInstanceId);for(let _ of n.memberDatas){_.characterId===s.characterId&&this.setOwnName(_.name);let l=this.#n.getEntityId(_.characterId);if(l){let d=a.get(l);if(d&&d.entityType===1&&d.name!==_.name){let c=d;c.gearLevel=_.gearLevel,c.name=_.name,c.class=_.classId}}this.add(n.raidInstanceId,n.partyInstanceId,_.characterId,l,_.name)}}}};var cn=class{entityToCharacterId;characterToEntityId;constructor(){this.entityToCharacterId=new Map,this.characterToEntityId=new Map}addMapping(r,a){this.entityToCharacterId.set(a,r),this.characterToEntityId.set(r,a)}getCharacterId(r){return this.entityToCharacterId.get(r)}getEntityId(r){return this.characterToEntityId.get(r)}clear(){this.entityToCharacterId.clear(),this.characterToEntityId.clear()}};var Sn=class extends kn.TypedEmitter{#n;#e;#r;#a;#i;#_;#s;#l;#d;constructor(r,a,s){super(),this.#n=r,this.#e=a,this.#r=new cn,this.#a=new on(this.#r),this.#i=new Q(this.#a,this.#e,s.isLive??!0),this.#_=new un(this.#r,this.#a,this.#i,this.#e),this.#s=new hn(this.#_,this.#i,this.#e,s),this.#s.emit=this.emit.bind(this),this.#l=!1,this.#d=!1,this.#s.options.isLive&&setInterval(this.broadcastStateChange.bind(this),100),this.#n.on("AbilityChangeNotify",n=>{}).on("ActiveAbilityNotify",n=>{}).on("AddonSkillFeatureChangeNotify",n=>{}).on("BlockSkillStateNotify",n=>{}).on("CounterAttackNotify",n=>{let _=n.parsed;if(!_)return;let l=this.#_.entities.get(_.sourceId);l&&this.#s.onCounterAttack(l,n.time)}).on("DeathNotify",n=>{let _=n.parsed;if(!_)return;let l=this.#_.entities.get(_.targetId);l&&this.#s.onDeath(l,n.time)}).on("EquipChangeNotify",n=>{let _=n.parsed;if(!_)return;let l=this.#_.entities.get(_.objectId);!l||l.entityType!==1||(l.itemSet=this.#_.getPlayerSetOptions(_.equipItemDataList))}).on("IdentityStanceChangeNotify",n=>{let _=n.parsed;if(!_)return;let l=this.#_.entities.get(_.objectId);l&&l.entityType===1&&(l.stance=_.stance)}).on("IdentityGaugeChangeNotify",n=>{}).on("InitAbility",n=>{}).on("InitEnv",n=>{this.#_.processInitEnv(n),this.#s.onInitEnv(n,n.time)}).on("InitLocal",n=>{}).on("InitPC",n=>{let _=this.#_.processInitPC(n);if(_&&n.parsed){let l=this.#e.getStatPairMap(n.parsed.statPair);this.#s.updateOrCreateEntity(_,{id:_.entityId.toString(16),name:_.name,classId:_.class,isPlayer:!0,gearScore:_.gearLevel,currentHp:Number(l.get(1))||0,maxHp:Number(l.get(27))||0},n.time)}}).on("InitItem",n=>{let _=n.parsed;!_||_.storageType!==1||(this.#_.localPlayer.itemSet=this.#_.getPlayerSetOptions(_.itemDataList))}).on("MigrationExecute",n=>{if(this.#_.localPlayer.characterId!==0n)return;let _=n.parsed;_&&(this.#_.localPlayer.characterId=_.account_CharacterId1<_.account_CharacterId2?_.account_CharacterId1:_.account_CharacterId2)}).on("NewNpc",n=>{let _=this.#_.processNewNpc(n);if(_&&n.parsed){let l=this.#e.getStatPairMap(n.parsed.npcStruct.statPair);this.#s.updateOrCreateEntity(_,{id:_.entityId.toString(16),name:_.name,npcId:_.typeId,isPlayer:!1,isBoss:_.isBoss,currentHp:Number(l.get(1))||0,maxHp:Number(l.get(27))||0},n.time)}}).on("NewNpcSummon",n=>{let _=this.#_.processNewNpcSummon(n);if(_&&n.parsed){let l=this.#e.getStatPairMap(n.parsed.npcData.statPair);this.#s.updateOrCreateEntity(_,{id:_.entityId.toString(16),name:_.name,npcId:_.typeId,isPlayer:!1,isBoss:_.isBoss,currentHp:Number(l.get(1))||0,maxHp:Number(l.get(27))||0},n.time)}}).on("NewPC",n=>{let _=this.#_.processNewPC(n);if(_&&n.parsed){_.itemSet=this.#_.getPlayerSetOptions(n.parsed.pcStruct.equipItemDataList);let l=this.#e.getStatPairMap(n.parsed.pcStruct.statPair);this.#s.updateOrCreateEntity(_,{id:_.entityId.toString(16),name:_.name,classId:_.class,isPlayer:!0,gearScore:_.gearLevel,currentHp:Number(l.get(1))||0,maxHp:Number(l.get(27))||0},n.time)}}).on("NewProjectile",n=>{let _=n.parsed;if(!_)return;let l={entityId:_.projectileInfo.projectileId,entityType:5,name:_.projectileInfo.projectileId.toString(16),ownerId:_.projectileInfo.ownerId,skillEffectId:_.projectileInfo.skillEffect,skillId:_.projectileInfo.skillId,stats:new Map};this.#_.entities.set(l.entityId,l)}).on("ParalyzationStateNotify",n=>{}).on("PartyInfo",n=>{this.#a.partyInfo(n,this.#_.entities,this.#_.localPlayer)}).on("PartyLeaveResult",n=>{let _=n.parsed;_&&this.#a.remove(_.partyInstanceId,_.name)}).on("PartyPassiveStatusEffectAddNotify",n=>{}).on("PartyPassiveStatusEffectRemoveNotify",n=>{}).on("PartyStatusEffectAddNotify",n=>{let _=n.parsed;if(_)for(let l of _.statusEffectDatas){let d=_.playerIdOnRefresh!==0n?_.playerIdOnRefresh:l.sourceId,c=this.#_.getSourceEntity(d);this.#i.RegisterStatusEffect(this.#i.buildStatusEffect(l,_.characterId,c.entityId,0,n.time))}}).on("PartyStatusEffectRemoveNotify",n=>{let _=n.parsed;if(_)for(let l of _.statusEffectIds)this.#i.RemoveStatusEffect(_.characterId,l,0,_.reason,n.time)}).on("PartyStatusEffectResultNotify",n=>{let _=n.parsed;_&&this.#a.add(_.raidInstanceId,_.partyInstanceId,_.characterId)}).on("PassiveStatusEffectAddNotify",n=>{}).on("PassiveStatusEffectRemoveNotify",n=>{}).on("RaidBossKillNotify",n=>{this.#s.onPhaseTransition(1,n.time)}).on("RaidResult",n=>{this.#s.onPhaseTransition(0,n.time)}).on("RemoveObject",n=>{let _=n.parsed;if(_)for(let l of _.unpublishedObjects)this.#i.RemoveLocalObject(l.objectId,n.time)}).on("SkillCastNotify",n=>{let _=n.parsed;if(!_)return;let l=this.#_.getSourceEntity(_.caster);l=this.#_.guessIsPlayer(l,_.skillId),this.#s.onStartSkill(l,_.skillId,n.time)}).on("SkillDamageAbnormalMoveNotify",n=>{let _=n.parsed;if(!_)return;let l=this.#_.getSourceEntity(_.sourceId);_.skillDamageAbnormalMoveEvents.forEach(d=>{let c=this.#_.getOrCreateEntity(d.skillDamageEvent.targetId),h=this.#_.getOrCreateEntity(_.sourceId);c.stats.set(1,d.skillDamageEvent.curHp),c.stats.set(27,d.skillDamageEvent.maxHp),this.#s.onDamage(l,h,c,{skillId:_.skillId,skillEffectId:_.skillEffectId,damage:Number(d.skillDamageEvent.damage),modifier:d.skillDamageEvent.modifier,targetCurHp:Number(d.skillDamageEvent.curHp),targetMaxHp:Number(d.skillDamageEvent.maxHp),damageAttr:d.skillDamageEvent.damageAttr??0,damageType:d.skillDamageEvent.damageType},_.skillDamageAbnormalMoveEvents.length,n.time)})}).on("SkillDamageNotify",n=>{let _=n.parsed;if(!_)return;let l=this.#_.getSourceEntity(_.sourceId);_.skillDamageEvents.forEach(d=>{let c=this.#_.getOrCreateEntity(d.targetId),h=this.#_.getOrCreateEntity(_.sourceId);this.#s.onDamage(l,h,c,{skillId:_.skillId,skillEffectId:_.skillEffectId,damage:Number(d.damage),modifier:d.modifier,targetCurHp:Number(d.curHp),targetMaxHp:Number(d.maxHp),damageAttr:d.damageAttr??0,damageType:d.damageType},_.skillDamageEvents.length,n.time)})}).on("SkillStageNotify",n=>{}).on("SkillStartNotify",n=>{let _=n.parsed;if(!_)return;let l=this.#_.getSourceEntity(_.sourceId);if(l=this.#_.guessIsPlayer(l,_.skillId),l.entityType===1){let d=l,c=d.skills.get(_.skillId);if(c||(c={effects:new Set,tripods:new Map},d.skills.set(_.skillId,c)),c.level=_.skillLevel,_.skillOptionData.tripodIndex&&_.skillOptionData.tripodLevel){c.tripods||(c.tripods=new Map);for(let[h,v]of["first","second","third"].entries()){if(_.skillOptionData.tripodIndex[v]===0){for(let O=1;O<=3;O++)c.tripods.delete(3*h+O);continue}let m=3*h+_.skillOptionData.tripodIndex[v],E=_.skillOptionData.tripodLevel[v],A=c.tripods.get(m);if(A&&E===A.level)continue;for(let O=1;O<=3;O++)c.tripods.delete(3*h+O);let B=this.#e.skillFeature.get(_.skillId)?.get(m),C=[];B&&B.entries.forEach(O=>{O.level!==0&&O.level!==E||C.push(O)}),c.tripods.set(m,{level:_.skillOptionData.tripodLevel[v],options:C.sort((O,Z)=>Z.level-O.level)})}}}this.#s.onStartSkill(l,_.skillId,n.time)}).on("StatusEffectAddNotify",n=>{let _=n.parsed;if(!_)return;let l=this.#_.getSourceEntity(_.statusEffectData.sourceId);this.#i.RegisterStatusEffect(this.#i.buildStatusEffect(_.statusEffectData,_.objectId,l.entityId,1,n.time))}).on("StatusEffectDurationNotify",n=>{let _=n.parsed;_&&this.#i.UpdateDuration(_.effectInstanceId,_.targetId,_.expirationTick,1)}).on("StatusEffectRemoveNotify",n=>{let _=n.parsed;if(_)for(let l of _.statusEffectIds)this.#i.RemoveStatusEffect(_.objectId,l,1,_.reason,n.time)}).on("StatusEffectSyncDataNotify",n=>{let _=n.parsed;_&&this.#i.SyncStatusEffect(_.effectInstanceId,_.characterId,_.objectId,_.value,this.#_.localPlayer.characterId)}).on("TriggerBossBattleStatus",n=>{this.#s.onPhaseTransition(2,n.time)}).on("TriggerFinishNotify",n=>{}).on("TriggerStartNotify",n=>{let _=n.parsed;if(_)switch(_.triggerSignalType){case 57:case 59:case 61:case 63:case 74:case 76:this.#d=!0,this.#l=!1;break;case 58:case 60:case 62:case 64:case 75:case 77:this.#d=!1,this.#l=!0;break}}).on("TroopMemberUpdateMinNotify",n=>{}).on("ZoneObjectUnpublishNotify",n=>{let _=n.parsed;_&&this.#i.RemoveLocalObject(_.objectId,n.time)}).on("ZoneStatusEffectAddNotify",n=>{}).on("TroopMemberUpdateMinNotify",n=>{let _=n.parsed;if(_&&_.statusEffectDatas.length>0)for(let l of _.statusEffectDatas){let d=this.#r.getEntityId(_.characterId),c=l.value?l.value.readUInt32LE():0,h=l.value?l.value.readUInt32LE(8):0,v=c<h?c:h;this.#i.SyncStatusEffect(l.effectInstanceId,_.characterId,d,v,this.#_.localPlayer.characterId)}}).on("ZoneStatusEffectRemoveNotify",n=>{}),this.#i.on("shieldApplied",n=>{let _=n.targetId;if(n.type===0&&(_=this.#r.getEntityId(n.targetId)??_),_===void 0)return;let l=this.#_.getSourceEntity(n.sourceId),d=this.#_.getOrCreateEntity(_);this.#s.onShieldApplied(d,l,n.statusEffectId,n.value)}).on("shieldChanged",(n,_,l)=>{let d=n.targetId;if(n.type===0&&(d=this.#r.getEntityId(n.targetId)??d),d===void 0)return;let c=this.#_.getSourceEntity(n.sourceId),h=this.#_.getOrCreateEntity(d);this.#s.onShieldUsed(h,c,n.statusEffectId,_-l)})}broadcastStateChange(){this.emit("state-change",this.#s.getBroadcast())}reset(){this.#s.resetState(+new Date)}cancelReset(){this.#s.cancelReset()}updateOptions(r){this.#s.updateOptions(r)}get encounters(){return this.#s.splitEncounter(new Date),this.#s.encounters}};0&&(module.exports={Parser});
