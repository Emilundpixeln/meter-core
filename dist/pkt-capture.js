"use strict";var B=Object.create;var l=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var S=Object.getOwnPropertyNames;var P=Object.getPrototypeOf,I=Object.prototype.hasOwnProperty;var N=(n,e)=>{for(var t in e)l(n,t,{get:e[t],enumerable:!0})},y=(n,e,t,s)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of S(e))!I.call(n,r)&&r!==t&&l(n,r,{get:()=>e[r],enumerable:!(s=E(e,r))||s.enumerable});return n};var q=(n,e,t)=>(t=n!=null?B(P(n)):{},y(e||!n||!n.__esModule?l(t,"default",{value:n,enumerable:!0}):t,n)),w=n=>y(l({},"__esModule",{value:!0}),n);var $={};N($,{PktCapture:()=>p,PktCaptureAll:()=>m,deviceList:()=>C,findDevice:()=>L});module.exports=w($);var b=q(require("cap")),T=require("net"),v=require("tiny-typed-emitter");var a=require("stream");var d=class extends a.EventEmitter{sessions;device_addr;listening_port;constructor(e,t){super(),this.sessions={},this.device_addr=e,this.listening_port=t,a.EventEmitter.call(this)}track_packet(e,t,s){let r=t.info.srcaddr+":"+s.info.srcport,o=t.info.dstaddr+":"+s.info.dstport,f;r<o?f=r+"-"+o:f=o+"-"+r;let c=!1,i=this.sessions[f];i||(c=!0,i=new _(this.device_addr,this.listening_port),this.sessions[f]=i,i.on("end",()=>{delete this.sessions[f],console.info(`[meter-core/tcp-tracker] - Remove session ${i?.src}->${i?.dst} (Total: ${Object.keys(this.sessions).length})`)})),i.track(e,t,s),c&&this.emit("session",i)}},_=class extends a.EventEmitter{state;src;dst;send_seqno;send_buffers;recv_seqno;recv_buffers;device_addr;listening_port;constructor(e,t){super(),this.device_addr=e,this.listening_port=t,this.state="NONE",this.send_seqno=0,this.send_buffers=[],this.recv_seqno=0,this.recv_buffers=[],a.EventEmitter.call(this)}track(e,t,s){let r=t.info.srcaddr+":"+s.info.srcport,o=t.info.dstaddr+":"+s.info.dstport;this.state==="NONE"?(this.device_addr===t.info.srcaddr||this.listening_port!==s.info.srcport?(this.src=r,this.dst=o):(this.src=o,this.dst=r),s.info.flags&2&&!(s.info.flags&16)?this.state="SYN_SENT":this.state="ESTAB"):s.info.flags&2&&!(s.info.flags&16)||this[this.state](e,t,s)}SYN_SENT(e,t,s){t.info.srcaddr+":"+s.info.srcport===this.dst&&s.info.flags&18?(this.send_seqno=s.info.ackno??0,this.state="SYN_RCVD"):s.info.flags&4&&(this.state="CLOSED")}SYN_RCVD(e,t,s){t.info.srcaddr+":"+s.info.srcport===this.src&&s.info.flags&16&&(this.recv_seqno=s.info.ackno??0,this.state="ESTAB")}ESTAB(e,t,s){let r=t.info.srcaddr+":"+s.info.srcport,o=t.info.totallen-t.hdrlen-s.hdrlen,f=!1;try{f=O(e,t,s)}catch{return}r===this.src?(o>0&&this.send_buffers.push({seqno:s.info.seqno,payload:Buffer.from(e.subarray(s.offset,s.offset+o))}),s.info.ackno&&!f&&this.flush_buffers(s.info.ackno??0,"recv"),s.info.flags&1&&(this.state="FIN_WAIT")):r===this.dst?(o>0&&this.recv_buffers.push({seqno:s.info.seqno,payload:Buffer.from(e.subarray(s.offset,s.offset+o))}),s.info.ackno&&!f&&this.flush_buffers(s.info.ackno??0,"send"),s.info.flags&1&&(this.state="CLOSE_WAIT")):console.error("[meter-core/tcp_tracker] - non-matching packet in session: ip="+t+"tcp="+s)}FIN_WAIT(e,t,s){t.info.srcaddr+":"+s.info.srcport===this.dst&&s.info.flags&1&&(this.state="CLOSING")}CLOSE_WAIT(e,t,s){t.info.srcaddr+":"+s.info.srcport===this.src&&s.info.flags&1&&(this.state="LAST_ACK")}LAST_ACK(e,t,s){t.info.srcaddr+":"+s.info.srcport===this.dst&&(this.state="CLOSED",this.emit("end",this))}CLOSING(e,t,s){t.info.srcaddr+":"+s.info.srcport===this.src&&(this.state="CLOSED",this.emit("end",this))}CLOSED(e,t,s){}flush_buffers(e,t){if(t==="recv"){this.recv_seqno===0&&(this.recv_seqno=e);let s=this.get_flush(this.recv_buffers,this.recv_seqno,e);if(this.recv_seqno=e,!s)return;this.emit("payload_recv",s)}else if(t==="send"){this.send_seqno===0&&(this.send_seqno=e);let s=this.get_flush(this.send_buffers,this.send_seqno,e);if(this.send_seqno=e,!s)return;this.emit("payload_send",s)}}get_flush(e,t,s){let r=s-t;if(r<=0)return null;let o=Buffer.alloc(r),f=Buffer.alloc(r),c=e.filter(i=>{if(i.seqno>s)return!0;i.seqno<t&&(i.payload=i.payload.subarray(t-i.seqno),i.seqno=t);let h=i.seqno-t,u=s-i.seqno;return i.payload.copy(o,h,0,u),f.fill(1,h,h+u),u<i.payload.length?(i.payload=i.payload.subarray(u),i.seqno+=u,!0):!1});return e.length=0,e.push(...c),f.includes(0)?(console.warn(`[meter-core/tcp_tracker] - Dropped ${r} bytes`),null):o}};function O(n,e,t){if(t.hdrlen==20)return!1;let s=e.offset+e.hdrlen+20,r=t.hdrlen-20,o=s+r;for(;s<o;)switch(n[s]){case 0:s=o;break;case 1:s+=1;break;case 2:s+=4;break;case 3:s+=3;break;case 4:s+=2;break;case 5:return!0;case 8:s+=10;break;case 254:case 255:s+=n[s+1]??1;break;default:throw new Error(`Unknown TCPOption ${n[s]}, packet is probably malformed, should drop.`)}return!1}var{findDevice:L,deviceList:C}=b.default.Cap,{Ethernet:A,PROTOCOL:g,IPV4:D,TCP:x}=b.default.decoders;var p=class extends v.TypedEmitter{c;#s;constructor(e,t){super(),this.c=new b.default.Cap,this.#s=Buffer.alloc(65535);let s=this.c.open(t,"tcp and (src port 6040 or dst port 6040)",10*1024*1024,this.#s),r=new k,o=new d(e,6040);this.c.setMinBytes&&this.c.setMinBytes(54),this.c.on("packet",(f,c)=>{if(s==="ETHERNET"){let i=A(this.#s);if(i.info.type===g.ETHERNET.IPV4){let h=D(this.#s,i.offset);if(h.info.protocol===g.IP.TCP){let u=x(this.#s,h.offset);o.track_packet(this.#s,h,u)}}}}),o.on("session",f=>{console.info(`[meter-core/pkt-capture] - New session ${f.src}->${f.dst} (Total: ${Object.keys(o.sessions).length})`),f.on("payload_recv",c=>{r.write(c);let i=r.read();for(;i;)this.emit("packet",i),i=r.read()})})}close(){this.c.close()}},m=class extends v.TypedEmitter{caps;constructor(){super(),this.caps=new Map;for(let e of C())for(let t of e.addresses)if((0,T.isIPv4)(t.addr))try{let s=new p(t.addr,e.name);s.on("packet",r=>this.emit("packet",r,e.name)),this.caps.set(e.name,s)}catch(s){console.error(`[meter-core/PktCaptureAll] ${s}`)}}close(){for(let e of this.caps.values())e.close()}},k=class{buffer;position;out;constructor(){this.buffer=null,this.position=0,this.out=[]}write(e){for(;e.length>0;){if(this.buffer){if(this.buffer.length<2){let r=this.buffer[0],o=(e[0]<<8)+r;this.buffer=Buffer.alloc(o),this.buffer[0]=r,this.position=1}let s=Math.min(e.length,this.buffer.length-this.position);e.copy(this.buffer,this.position,0,s),this.position+=s,this.position===this.buffer.length&&(this.out.push(this.buffer),this.buffer=null,this.position=0),e=e.subarray(s);continue}if(e.length<2){this.buffer=Buffer.from(e),this.position=e.length;break}let t=e.readUInt16LE(0);if(t>e.length){this.buffer=Buffer.alloc(t),e.copy(this.buffer),this.position=e.length;break}this.out.push(e.subarray(0,t)),e=e.subarray(t)}}read(){return this.out.shift()}};0&&(module.exports={PktCapture,PktCaptureAll,deviceList,findDevice});
