"use strict";var E=Object.create;var n=Object.defineProperty;var B=Object.getOwnPropertyDescriptor;var P=Object.getOwnPropertyNames;var C=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var T=(s,t)=>{for(var e in t)n(s,e,{get:t[e],enumerable:!0})},k=(s,t,e,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of P(t))!w.call(s,i)&&i!==e&&n(s,i,{get:()=>t[i],enumerable:!(r=B(t,i))||r.enumerable});return s};var I=(s,t,e)=>(e=s!=null?E(C(s)):{},k(t||!s||!s.__esModule?n(e,"default",{value:s,enumerable:!0}):e,s)),x=s=>k(n({},"__esModule",{value:!0}),s);var R={};T(R,{PktCapture:()=>c,PktCaptureAll:()=>a,deviceList:()=>g,findDevice:()=>M});module.exports=x(R);var h=I(require("cap")),y=require("net");var m=require("tiny-typed-emitter"),{findDevice:M,deviceList:g}=h.default.Cap,{Ethernet:L,PROTOCOL:v,IPV4:N,TCP:O}=h.default.decoders;var c=class extends m.TypedEmitter{c;buffer;constructor(t){super(),this.c=new h.default.Cap,this.buffer=Buffer.alloc(65535);let e=this.c.open(t,"tcp and src port 6040",10*1024*1024,this.buffer),r=new b;this.c.setMinBytes&&this.c.setMinBytes(6),this.c.on("packet",(i,f)=>{if(e==="ETHERNET"){let d=L(this.buffer);if(d.info.type===v.ETHERNET.IPV4){let o=N(this.buffer,d.offset);if(o.info.protocol===v.IP.TCP){let u=o.info.totallen-o.hdrlen,p=O(this.buffer,o.offset);if(u-=p.hdrlen,u){r.write(this.buffer.subarray(p.offset,p.offset+u));let l=r.read();for(;l;)this.emit("packet",l),l=r.read()}}}}})}close(){this.c.close()}},a=class extends m.TypedEmitter{caps;constructor(t){super(),this.caps=new Map;for(let e of g())for(let r of e.addresses)if((0,y.isIPv4)(r.addr))try{let i=new c(e.name);i.on("packet",f=>this.emit("packet",f,e.name)),this.caps.set(e.name,i)}catch(i){t(`[meter-core/PktCaptureAll] ${i}`)}}close(){for(let t of this.caps.values())t.close()}},b=class{buffer;position;out;constructor(){this.buffer=null,this.position=0,this.out=[]}write(t){for(;t.length>0;){if(this.buffer){if(this.buffer.length<2){let i=this.buffer[0],f=(t[0]<<8)+i;this.buffer=Buffer.alloc(f),this.buffer[0]=i,this.position=1}let r=Math.min(t.length,this.buffer.length-this.position);t.copy(this.buffer,this.position,0,r),this.position+=r,this.position===this.buffer.length&&(this.out.push(this.buffer),this.buffer=null,this.position=0),t=t.subarray(r);continue}if(t.length<2){this.buffer=Buffer.from(t),this.position=t.length;break}let e=t.readUInt16LE(0);if(e>t.length)break;this.out.push(t.subarray(0,e)),t=t.subarray(e)}}read(){return this.out.shift()}};0&&(module.exports={PktCapture,PktCaptureAll,deviceList,findDevice});
