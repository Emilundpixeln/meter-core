"use strict";var y=Object.create;var c=Object.defineProperty;var B=Object.getOwnPropertyDescriptor;var w=Object.getOwnPropertyNames;var C=Object.getPrototypeOf,P=Object.prototype.hasOwnProperty;var T=(e,t)=>{for(var s in t)c(e,s,{get:t[s],enumerable:!0})},v=(e,t,s,f)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of w(t))!P.call(e,i)&&i!==s&&c(e,i,{get:()=>t[i],enumerable:!(f=B(t,i))||f.enumerable});return e};var I=(e,t,s)=>(s=e!=null?y(C(e)):{},v(t||!e||!e.__esModule?c(s,"default",{value:e,enumerable:!0}):s,e)),x=e=>v(c({},"__esModule",{value:!0}),e);var R={};T(R,{PktCapture:()=>u,PktCaptureAll:()=>b,deviceList:()=>M,findDevice:()=>g});module.exports=x(R);var h=I(require("cap")),E=require("os"),k=require("tiny-typed-emitter"),{findDevice:g,deviceList:M}=h.default.Cap,{Ethernet:N,PROTOCOL:d,IPV4:O,TCP:L}=h.default.decoders;var u=class extends k.TypedEmitter{c;buffer;constructor(t){super(),this.c=new h.default.Cap,this.buffer=Buffer.alloc(65535);let s=this.c.open(t,"tcp and src port 6040",10*1024*1024,this.buffer),f=new m;this.c.setMinBytes&&this.c.setMinBytes(6),this.c.on("packet",(i,o)=>{if(s==="ETHERNET"){let n=N(this.buffer);if(n.info.type===d.ETHERNET.IPV4){let r=O(this.buffer,n.offset);if(r.info.protocol===d.IP.TCP){let p=r.info.totallen-r.hdrlen,l=L(this.buffer,r.offset);if(p-=l.hdrlen,p){f.write(this.buffer.subarray(l.offset,l.offset+p));let a=f.read();for(;a;)this.emit("packet",a),a=f.read()}}}}})}close(){this.c.close()}},b=class extends k.TypedEmitter{caps;constructor(t=!1){super(),this.caps=new Map;for(let[s,f]of Object.entries((0,E.networkInterfaces)()))if(f){for(let i of f)if(!(!t&&i.internal)&&i.family==="IPv4"){let o=g(i.address);if(o){let n=new u(o);n.on("packet",r=>this.emit("packet",r,s)),this.caps.set(i.address,n)}}}}close(){for(let t of this.caps.values())t.close()}},m=class{buffer;position;out;constructor(){this.buffer=null,this.position=0,this.out=[]}write(t){for(;t.length>0;){if(this.buffer){if(this.buffer.length<2){let i=this.buffer[0],o=(t[0]<<8)+i;this.buffer=Buffer.alloc(o),this.buffer[0]=i,this.position=1}let f=Math.min(t.length,this.buffer.length-this.position);t.copy(this.buffer,this.position,0,f),this.position+=f,this.position===this.buffer.length&&(this.out.push(this.buffer),this.buffer=null,this.position=0),t=t.subarray(f);continue}if(t.length<2){this.buffer=Buffer.from(t),this.position=t.length;break}let s=t.readUInt16LE(0);if(s>t.length)break;this.out.push(t.subarray(0,s)),t=t.subarray(s)}}read(){return this.out.shift()}};0&&(module.exports={PktCapture,PktCaptureAll,deviceList,findDevice});
