"use strict";var g=Object.create;var f=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var E=Object.getPrototypeOf,B=Object.prototype.hasOwnProperty;var C=(s,e)=>{for(var t in e)f(s,t,{get:e[t],enumerable:!0})},b=(s,e,t,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of y(e))!B.call(s,i)&&i!==t&&f(s,i,{get:()=>e[i],enumerable:!(r=v(e,i))||r.enumerable});return s};var P=(s,e,t)=>(t=s!=null?g(E(s)):{},b(e||!s||!s.__esModule?f(t,"default",{value:s,enumerable:!0}):t,s)),T=s=>b(f({},"__esModule",{value:!0}),s);var L={};C(L,{PktCapture:()=>n,PktCaptureAll:()=>p,deviceList:()=>k,findDevice:()=>w});module.exports=T(L);var a=require("tiny-typed-emitter"),c=P(require("cap")),d=require("net"),{findDevice:w,deviceList:k}=c.default.Cap,{Ethernet:x,PROTOCOL:m,IPV4:I,TCP:M}=c.default.decoders;var n=class extends a.TypedEmitter{c;device;constructor(e){super(),this.device=e,this.c=new c.default.Cap;let t=Buffer.alloc(65535),r=this.c.open(e,"tcp and src port 6040",10*1024*1024,t),i=new l;this.c.setMinBytes&&this.c.setMinBytes(0),this.c.on("packet",()=>{if(r==="ETHERNET"){let o=x(t);if(o.info.type===m.ETHERNET.IPV4&&(o=I(t,o.offset),o.info.protocol===m.IP.TCP)){let h=o.info.totallen-o.hdrlen;if(o=M(t,o.offset),h-=o.hdrlen,h){i.write(Buffer.from(t.subarray(o.offset,o.offset+h)));let u=i.read();for(;u;)this.emit("packet",u),u=i.read()}}}})}close(){try{this.c.close()}catch{}}},p=class extends a.TypedEmitter{caps;constructor(){super(),this.caps=new Map;for(let e of k())for(let t of e.addresses)if((0,d.isIPv4)(t.addr)){let r;try{r=new n(e.name)}catch(i){console.error(`[meter-core/PktCaptureAll] ${i}`),r?.close();continue}r.on("packet",i=>this.emit("packet",i,e.name)),this.caps.set(e.name,r)}}close(){for(let e of this.caps.values())e.close()}},l=class{buffer;position;out;constructor(){this.buffer=null,this.position=0,this.out=[]}write(e){for(;e.length>0;){if(this.buffer){if(this.buffer.length<2){let i=this.buffer[0],o=(e[0]<<8)+i;this.buffer=Buffer.alloc(o),this.buffer[0]=i,this.position=1}let r=Math.min(e.length,this.buffer.length-this.position);e.copy(this.buffer,this.position,0,r),this.position+=r,this.position===this.buffer.length&&(this.out.push(this.buffer),this.buffer=null,this.position=0),e=e.subarray(r);continue}if(e.length<2){this.buffer=Buffer.from(e),this.position=e.length;break}let t=e.readUInt16LE(0);if(t>e.length)break;this.out.push(e.subarray(0,t)),e=e.subarray(t)}}read(){return this.out.shift()}};0&&(module.exports={PktCapture,PktCaptureAll,deviceList,findDevice});
