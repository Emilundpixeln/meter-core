import _ from"cap";import{isIPv4 as T}from"net";import{TypedEmitter as y}from"tiny-typed-emitter";import{EventEmitter as a}from"stream";var h=class{buffer;position;out;constructor(){this.buffer=null,this.position=0,this.out=[]}write(e){for(;e.length>0;){if(this.buffer){if(this.buffer.length<2){let r=this.buffer[0],n=(e[0]<<8)+r;this.buffer=Buffer.alloc(n),this.buffer[0]=r,this.position=1}let s=Math.min(e.length,this.buffer.length-this.position);e.copy(this.buffer,this.position,0,s),this.position+=s,this.position===this.buffer.length&&(this.out.push(this.buffer),this.buffer=null,this.position=0),e=e.subarray(s);continue}if(e.length<2){this.buffer=Buffer.from(e),this.position=e.length;break}let t=e.readUInt16LE(0);if(t===0){this.buffer=null;return}if(t>e.length){this.buffer=Buffer.alloc(t),e.copy(this.buffer),this.position=e.length;break}this.out.push(e.subarray(0,t)),e=e.subarray(t)}}read(){return this.out.shift()}};var l=class extends a{sessions;listening_port;constructor(e){super(),this.sessions={},this.listening_port=e,a.call(this)}track_packet(e,t,s){let r=t.info.srcaddr+":"+s.info.srcport,n=t.info.dstaddr+":"+s.info.dstport,f;r<n?f=r+"-"+n:f=n+"-"+r;let c=!1,i=this.sessions[f];i||(c=!0,i=new p(this.listening_port),this.sessions[f]=i,i.on("end",()=>{delete this.sessions[f],console.info(`[meter-core/tcp-tracker] - Remove session ${i?.src}->${i?.dst} (Total: ${Object.keys(this.sessions).length})`)})),i.track(e,t,s),c&&this.emit("session",i)}},p=class extends a{state;src;dst;send_seqno;send_buffers;recv_seqno;recv_buffers;listening_port;is_ignored;packetBuffer;constructor(e){super(),this.listening_port=e,this.state="NONE",this.send_seqno=0,this.send_buffers=[],this.recv_seqno=0,this.recv_buffers=[],this.is_ignored=!1,this.packetBuffer=new h,a.call(this)}track(e,t,s){let r=t.info.srcaddr+":"+s.info.srcport,n=t.info.dstaddr+":"+s.info.dstport;this.state==="NONE"?(m(t.info.srcaddr)&&this.listening_port===s.info.dstport?(this.src=r,this.dst=n):this.listening_port===s.info.srcport&&m(t.info.dstaddr)?(this.src=n,this.dst=r):(this.src=r,this.dst=n,this.is_ignored=!0),s.info.flags&2&&!(s.info.flags&16)?this.state="SYN_SENT":this.state="ESTAB"):s.info.flags&2&&!(s.info.flags&16)||this[this.state](e,t,s)}SYN_SENT(e,t,s){t.info.srcaddr+":"+s.info.srcport===this.dst&&s.info.flags&18?(this.send_seqno=s.info.ackno??0,this.state="SYN_RCVD"):s.info.flags&4&&(this.state="CLOSED")}SYN_RCVD(e,t,s){t.info.srcaddr+":"+s.info.srcport===this.src&&s.info.flags&16&&(this.recv_seqno=s.info.ackno??0,this.state="ESTAB")}ESTAB(e,t,s){if(this.is_ignored)return;let r=t.info.srcaddr+":"+s.info.srcport,n=t.info.totallen-t.hdrlen-s.hdrlen,f=!1;try{f=v(e,t,s)}catch{return}r===this.src?(n>0&&this.send_buffers.push({seqno:s.info.seqno,payload:Buffer.from(e.subarray(s.offset,s.offset+n))}),s.info.ackno&&!f&&this.flush_buffers(s.info.ackno??0,"recv"),s.info.flags&1?this.state="FIN_WAIT":s.info.flags&4&&this.emit("end",this)):r===this.dst?(n>0&&this.recv_buffers.push({seqno:s.info.seqno,payload:Buffer.from(e.subarray(s.offset,s.offset+n))}),s.info.ackno&&!f&&this.flush_buffers(s.info.ackno??0,"send"),s.info.flags&1?this.state="CLOSE_WAIT":s.info.flags&4&&this.emit("end",this)):console.error("[meter-core/tcp_tracker] - non-matching packet in session: ip="+t+"tcp="+s)}FIN_WAIT(e,t,s){t.info.srcaddr+":"+s.info.srcport===this.dst&&s.info.flags&1&&(this.state="CLOSING")}CLOSE_WAIT(e,t,s){t.info.srcaddr+":"+s.info.srcport===this.src&&s.info.flags&1&&(this.state="LAST_ACK")}LAST_ACK(e,t,s){t.info.srcaddr+":"+s.info.srcport===this.dst&&(this.state="CLOSED",this.emit("end",this))}CLOSING(e,t,s){t.info.srcaddr+":"+s.info.srcport===this.src&&(this.state="CLOSED",this.emit("end",this))}CLOSED(e,t,s){}flush_buffers(e,t){if(t==="recv"){this.recv_seqno===0&&(this.recv_seqno=e);let s=this.get_flush(this.recv_buffers,this.recv_seqno,e);if(this.recv_seqno=e,!s)return;this.packetBuffer.write(s);let r=this.packetBuffer.read();for(;r;)this.emit("payload_recv",r),r=this.packetBuffer.read()}else if(t==="send"){this.send_seqno===0&&(this.send_seqno=e);let s=this.get_flush(this.send_buffers,this.send_seqno,e);if(this.send_seqno=e,!s)return}}get_flush(e,t,s){let r=s-t;if(r<=0)return null;let n=Buffer.alloc(r),f=Buffer.alloc(r),c=e.filter(i=>{if(i.seqno>s)return!0;i.seqno<t&&(i.payload=i.payload.subarray(t-i.seqno),i.seqno=t);let d=i.seqno-t,u=s-i.seqno;return i.payload.copy(n,d,0,u),f.fill(1,d,d+u),u<i.payload.length?(i.payload=i.payload.subarray(u),i.seqno+=u,!0):!1});return e.length=0,e.push(...c),f.includes(0)?(console.warn(`[meter-core/tcp_tracker] - Dropped ${r} bytes`),null):n}};function v(o,e,t){if(t.hdrlen==20)return!1;let s=e.offset+e.hdrlen+20,r=t.hdrlen-20,n=s+r;for(;s<n;)switch(o[s]){case 0:s=n;break;case 1:s+=1;break;case 2:s+=4;break;case 3:s+=3;break;case 4:s+=2;break;case 5:return!0;case 8:s+=10;break;case 254:case 255:s+=o[s+1]??1;break;default:throw new Error(`Unknown TCPOption ${o[s]}, packet is probably malformed, should drop.`)}return!1}var B=[/^(::f{4}:)?10\.\d{1,3}\.\d{1,3}\.\d{1,3}/,/^(::f{4}:)?127\.\d{1,3}\.\d{1,3}\.\d{1,3}/,/^(::f{4}:)?169\.254\.([1-9]|1?\d\d|2[0-4]\d|25[0-4])\.\d{1,3}/,/^(::f{4}:)?(172\.1[6-9]|172\.2\d|172\.3[0-1])\.\d{1,3}\.\d{1,3}/,/^(::f{4}:)?192\.168\.\d{1,3}\.\d{1,3}/,/^f[c-d][0-9a-f]{2}(::1$|:[0-9a-f]{1,4}){1,7}/,/^fe[89ab][0-9a-f](::1$|:[0-9a-f]{1,4}){1,7}/];function m(o){return o==="::"||o==="::1"||B.some(function(e){return e.test(o)})}var{findDevice:x,deviceList:C}=_.Cap,{Ethernet:P,PROTOCOL:k,IPV4:E,TCP:S}=_.decoders;var b=class extends y{c;#s;constructor(e){super(),this.c=new _.Cap,this.#s=Buffer.alloc(65535);let t=this.c.open(e,"tcp and (src port 6040 or dst port 6040)",10*1024*1024,this.#s),s=new l(6040);this.c.setMinBytes&&this.c.setMinBytes(54),this.c.on("packet",(r,n)=>{if(t==="ETHERNET"){let f=P(this.#s);if(f.info.type===k.ETHERNET.IPV4){let c=E(this.#s,f.offset);if(c.info.protocol===k.IP.TCP){let i=S(this.#s,c.offset);s.track_packet(this.#s,c,i)}}}}),s.on("session",r=>{console.info(`[meter-core/pkt-capture] - New session ${r.src}->${r.dst} ${r.is_ignored?"(ingored) ":""}(Total: ${Object.keys(s.sessions).length})`),r.on("payload_recv",n=>{this.emit("packet",n)})})}close(){this.c.close()}},g=class extends y{caps;constructor(){super(),this.caps=new Map;for(let e of C())for(let t of e.addresses)if(T(t.addr))try{let s=new b(e.name);s.on("packet",r=>this.emit("packet",r,e.name)),this.caps.set(e.name,s)}catch(s){console.error(`[meter-core/PktCaptureAll] ${s}`)}}close(){for(let e of this.caps.values())e.close()}};export{b as PktCapture,g as PktCaptureAll,C as deviceList,x as findDevice};
