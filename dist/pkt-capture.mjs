import _ from"cap";import{isIPv4 as T}from"net";import{TypedEmitter as v}from"tiny-typed-emitter";import{EventEmitter as a}from"stream";var h=class{buffer;position;out;constructor(){this.buffer=null,this.position=0,this.out=[]}write(s){for(;s.length>0;){if(this.buffer){if(this.buffer.length<2){let r=this.buffer[0],n=(s[0]<<8)+r;this.buffer=Buffer.alloc(n),this.buffer[0]=r,this.position=1}let e=Math.min(s.length,this.buffer.length-this.position);s.copy(this.buffer,this.position,0,e),this.position+=e,this.position===this.buffer.length&&(this.out.push(this.buffer),this.buffer=null,this.position=0),s=s.subarray(e);continue}if(s.length<2){this.buffer=Buffer.from(s),this.position=s.length;break}let t=s.readUInt16LE(0);if(t>s.length){this.buffer=Buffer.alloc(t),s.copy(this.buffer),this.position=s.length;break}this.out.push(s.subarray(0,t)),s=s.subarray(t)}}read(){return this.out.shift()}};var l=class extends a{sessions;listening_port;constructor(s){super(),this.sessions={},this.listening_port=s,a.call(this)}track_packet(s,t,e){let r=t.info.srcaddr+":"+e.info.srcport,n=t.info.dstaddr+":"+e.info.dstport,f;r<n?f=r+"-"+n:f=n+"-"+r;let c=!1,i=this.sessions[f];i||(c=!0,i=new p(this.listening_port),this.sessions[f]=i,i.on("end",()=>{delete this.sessions[f],console.info(`[meter-core/tcp-tracker] - Remove session ${i?.src}->${i?.dst} (Total: ${Object.keys(this.sessions).length})`)})),i.track(s,t,e),c&&this.emit("session",i)}},p=class extends a{state;src;dst;send_seqno;send_buffers;recv_seqno;recv_buffers;listening_port;is_ignored;packetBuffer;constructor(s){super(),this.listening_port=s,this.state="NONE",this.send_seqno=0,this.send_buffers=[],this.recv_seqno=0,this.recv_buffers=[],this.is_ignored=!1,this.packetBuffer=new h,a.call(this)}track(s,t,e){let r=t.info.srcaddr+":"+e.info.srcport,n=t.info.dstaddr+":"+e.info.dstport;this.state==="NONE"?(m(t.info.srcaddr)&&this.listening_port===e.info.dstport?(this.src=r,this.dst=n):this.listening_port===e.info.srcport&&m(t.info.srcaddr)?(this.src=n,this.dst=r):this.is_ignored=!0,e.info.flags&2&&!(e.info.flags&16)?this.state="SYN_SENT":this.state="ESTAB"):e.info.flags&2&&!(e.info.flags&16)||this[this.state](s,t,e)}SYN_SENT(s,t,e){t.info.srcaddr+":"+e.info.srcport===this.dst&&e.info.flags&18?(this.send_seqno=e.info.ackno??0,this.state="SYN_RCVD"):e.info.flags&4&&(this.state="CLOSED")}SYN_RCVD(s,t,e){t.info.srcaddr+":"+e.info.srcport===this.src&&e.info.flags&16&&(this.recv_seqno=e.info.ackno??0,this.state="ESTAB")}ESTAB(s,t,e){if(this.is_ignored)return;let r=t.info.srcaddr+":"+e.info.srcport,n=t.info.totallen-t.hdrlen-e.hdrlen,f=!1;try{f=B(s,t,e)}catch{return}r===this.src?(n>0&&this.send_buffers.push({seqno:e.info.seqno,payload:Buffer.from(s.subarray(e.offset,e.offset+n))}),e.info.ackno&&!f&&this.flush_buffers(e.info.ackno??0,"recv"),e.info.flags&1&&(this.state="FIN_WAIT")):r===this.dst?(n>0&&this.recv_buffers.push({seqno:e.info.seqno,payload:Buffer.from(s.subarray(e.offset,e.offset+n))}),e.info.ackno&&!f&&this.flush_buffers(e.info.ackno??0,"send"),e.info.flags&1&&(this.state="CLOSE_WAIT")):console.error("[meter-core/tcp_tracker] - non-matching packet in session: ip="+t+"tcp="+e)}FIN_WAIT(s,t,e){t.info.srcaddr+":"+e.info.srcport===this.dst&&e.info.flags&1&&(this.state="CLOSING")}CLOSE_WAIT(s,t,e){t.info.srcaddr+":"+e.info.srcport===this.src&&e.info.flags&1&&(this.state="LAST_ACK")}LAST_ACK(s,t,e){t.info.srcaddr+":"+e.info.srcport===this.dst&&(this.state="CLOSED",this.emit("end",this))}CLOSING(s,t,e){t.info.srcaddr+":"+e.info.srcport===this.src&&(this.state="CLOSED",this.emit("end",this))}CLOSED(s,t,e){}flush_buffers(s,t){if(t==="recv"){this.recv_seqno===0&&(this.recv_seqno=s);let e=this.get_flush(this.recv_buffers,this.recv_seqno,s);if(this.recv_seqno=s,!e)return;this.packetBuffer.write(e);let r=this.packetBuffer.read();for(;r;)r=this.packetBuffer.read(),this.emit("payload_recv",r)}else if(t==="send"){this.send_seqno===0&&(this.send_seqno=s);let e=this.get_flush(this.send_buffers,this.send_seqno,s);if(this.send_seqno=s,!e)return}}get_flush(s,t,e){let r=e-t;if(r<=0)return null;let n=Buffer.alloc(r),f=Buffer.alloc(r),c=s.filter(i=>{if(i.seqno>e)return!0;i.seqno<t&&(i.payload=i.payload.subarray(t-i.seqno),i.seqno=t);let d=i.seqno-t,u=e-i.seqno;return i.payload.copy(n,d,0,u),f.fill(1,d,d+u),u<i.payload.length?(i.payload=i.payload.subarray(u),i.seqno+=u,!0):!1});return s.length=0,s.push(...c),f.includes(0)?(console.warn(`[meter-core/tcp_tracker] - Dropped ${r} bytes`),null):n}};function B(o,s,t){if(t.hdrlen==20)return!1;let e=s.offset+s.hdrlen+20,r=t.hdrlen-20,n=e+r;for(;e<n;)switch(o[e]){case 0:e=n;break;case 1:e+=1;break;case 2:e+=4;break;case 3:e+=3;break;case 4:e+=2;break;case 5:return!0;case 8:e+=10;break;case 254:case 255:e+=o[e+1]??1;break;default:throw new Error(`Unknown TCPOption ${o[e]}, packet is probably malformed, should drop.`)}return!1}var g=[/^(::f{4}:)?10\.\d{1,3}\.\d{1,3}\.\d{1,3}/,/^(::f{4}:)?127\.\d{1,3}\.\d{1,3}\.\d{1,3}/,/^(::f{4}:)?169\.254\.([1-9]|1?\d\d|2[0-4]\d|25[0-4])\.\d{1,3}/,/^(::f{4}:)?(172\.1[6-9]|172\.2\d|172\.3[0-1])\.\d{1,3}\.\d{1,3}/,/^(::f{4}:)?192\.168\.\d{1,3}\.\d{1,3}/,/^f[c-d][0-9a-f]{2}(::1$|:[0-9a-f]{1,4}){1,7}/,/^fe[89ab][0-9a-f](::1$|:[0-9a-f]{1,4}){1,7}/];function m(o){return o==="::"||o==="::1"||g.some(function(s){return s.test(o)})}var{findDevice:x,deviceList:C}=_.Cap,{Ethernet:E,PROTOCOL:k,IPV4:P,TCP:S}=_.decoders;var b=class extends v{c;#e;constructor(s){super(),this.c=new _.Cap,this.#e=Buffer.alloc(65535);let t=this.c.open(s,"tcp and (src port 6040 or dst port 6040)",10*1024*1024,this.#e),e=new l(6040);this.c.setMinBytes&&this.c.setMinBytes(54),this.c.on("packet",(r,n)=>{if(t==="ETHERNET"){let f=E(this.#e);if(f.info.type===k.ETHERNET.IPV4){let c=P(this.#e,f.offset);if(c.info.protocol===k.IP.TCP){let i=S(this.#e,c.offset);e.track_packet(this.#e,c,i)}}}}),e.on("session",r=>{console.info(`[meter-core/pkt-capture] - New session ${r.src}->${r.dst} (Total: ${Object.keys(e.sessions).length})`),r.on("payload_recv",n=>{this.emit("packet",n)})})}close(){this.c.close()}},y=class extends v{caps;constructor(){super(),this.caps=new Map;for(let s of C())for(let t of s.addresses)if(T(t.addr))try{let e=new b(s.name);e.on("packet",r=>this.emit("packet",r,s.name)),this.caps.set(s.name,e)}catch(e){console.error(`[meter-core/PktCaptureAll] ${e}`)}}close(){for(let s of this.caps.values())s.close()}};export{b as PktCapture,y as PktCaptureAll,C as deviceList,x as findDevice};
