import{TypedEmitter as a}from"tiny-typed-emitter";import h from"cap";import{isIPv4 as b}from"net";var{findDevice:B,deviceList:m}=h.Cap,{Ethernet:g,PROTOCOL:p,IPV4:k,TCP:v}=h.decoders;var n=class extends a{c;device;constructor(t){super(),this.device=t,this.c=new h.Cap;let s=Buffer.alloc(65535),i=this.c.open(t,"tcp and src port 6040",65535,s),f=new c;this.c.setMinBytes&&this.c.setMinBytes(16),this.c.on("packet",()=>{if(i==="ETHERNET"){let e=g(s);if(e.info.type===p.ETHERNET.IPV4&&(e=k(s,e.offset),e.info.protocol===p.IP.TCP)){let o=e.info.totallen-e.hdrlen;if(e=v(s,e.offset),o-=e.hdrlen,o){f.write(Buffer.from(s.subarray(e.offset,e.offset+o)));let r=f.read();for(;r;)this.emit("packet",r),r=f.read()}}}})}close(){this.c.close()}},l=class extends a{caps;constructor(){super(),this.caps=new Map;for(let t of m())for(let s of t.addresses)if(b(s.addr)){let i=new n(t.name);i.on("packet",f=>this.emit("packet",f,t.name)),this.caps.set(t.name,i)}}close(){for(let t of this.caps.values())t.close()}},c=class{buffer;position;out;constructor(){this.buffer=null,this.position=0,this.out=[]}write(t){for(;t.length>0;){if(this.buffer){if(this.buffer.length<2){let f=this.buffer[0],e=(t[0]<<8)+f;this.buffer=Buffer.alloc(e),this.buffer[0]=f,this.position=1}let i=Math.min(t.length,this.buffer.length-this.position);t.copy(this.buffer,this.position,0,i),this.position+=i,this.position===this.buffer.length&&(this.out.push(this.buffer),this.buffer=null,this.position=0),t=t.subarray(i);continue}if(t.length<2){this.buffer=Buffer.from(t),this.position=t.length;break}let s=t.readUInt16LE(0);if(s>t.length){this.buffer=Buffer.alloc(s),t.copy(this.buffer),this.position=t.length;break}this.out.push(t.subarray(0,s)),t=t.subarray(s)}}read(){return this.out.shift()}};export{n as PktCapture,l as PktCaptureAll,m as deviceList,B as findDevice};
