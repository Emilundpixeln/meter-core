import u from"cap";import{isIPv4 as g}from"net";import{TypedEmitter as d}from"tiny-typed-emitter";var{findDevice:T,deviceList:k}=u.Cap,{Ethernet:v,PROTOCOL:b,IPV4:y,TCP:E}=u.decoders;var h=class extends d{c;#t;constructor(t){super(),this.c=new u.Cap,this.#t=Buffer.alloc(65535);let e=this.c.open(t,"tcp and src port 6040",10*1024*1024,this.#t),s=new p;this.c.setMinBytes&&this.c.setMinBytes(54),this.c.on("packet",(i,r)=>{if(e==="ETHERNET"){let a=v(this.#t);if(a.info.type===b.ETHERNET.IPV4){let o=y(this.#t,a.offset);if(o.info.protocol===b.IP.TCP){let n=o.info.totallen-o.hdrlen,f=E(this.#t,o.offset);if(n-=f.hdrlen,n){s.write(this.#t.subarray(f.offset,f.offset+n));let c=s.read();for(;c;)this.emit("packet",c),c=s.read()}}}}})}close(){this.c.close()}},m=class extends d{caps;constructor(t){super(),this.caps=new Map;for(let e of k())for(let s of e.addresses)if(g(s.addr))try{let i=new h(e.name);i.on("packet",r=>this.emit("packet",r,e.name)),this.caps.set(e.name,i)}catch(i){t(`[meter-core/PktCaptureAll] ${i}`)}}close(){for(let t of this.caps.values())t.close()}},p=class{buffer;position;out;constructor(){this.buffer=null,this.position=0,this.out=[]}write(t){for(;t.length>0;){if(this.buffer){if(this.buffer.length<2){let i=this.buffer[0],r=(t[0]<<8)+i;this.buffer=Buffer.alloc(r),this.buffer[0]=i,this.position=1}let s=Math.min(t.length,this.buffer.length-this.position);t.copy(this.buffer,this.position,0,s),this.position+=s,this.position===this.buffer.length&&(this.out.push(this.buffer),this.buffer=null,this.position=0),t=t.subarray(s);continue}if(t.length<2){this.buffer=Buffer.from(t),this.position=t.length;break}let e=t.readUInt16LE(0);if(e>t.length)break;this.out.push(t.subarray(0,e)),t=t.subarray(e)}}read(){return this.out.shift()}};export{h as PktCapture,m as PktCaptureAll,k as deviceList,T as findDevice};
