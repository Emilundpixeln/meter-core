import{TypedEmitter as a}from"tiny-typed-emitter";import h from"cap";import{isIPv4 as b}from"net";var{findDevice:B,deviceList:m}=h.Cap,{Ethernet:g,PROTOCOL:p,IPV4:k,TCP:y}=h.decoders;var n=class extends a{c;device;constructor(e){super(),this.device=e,this.c=new h.Cap;let t=Buffer.alloc(2**22),i=this.c.open(e,"tcp and src port 6040",t.length,t),r=new c;this.c.setMinBytes&&this.c.setMinBytes(16),this.c.on("packet",()=>{if(i==="ETHERNET"){let s=g(t);if(s.info.type===p.ETHERNET.IPV4&&(s=k(t,s.offset),s.info.protocol===p.IP.TCP)){let o=s.info.totallen-s.hdrlen;if(s=y(t,s.offset),o-=s.hdrlen,o){r.write(Buffer.from(t.subarray(s.offset,s.offset+o)));let f=r.read();for(;f;)this.emit("packet",f),f=r.read()}}}})}close(){try{this.c.close()}catch{}}},l=class extends a{caps;constructor(){super(),this.caps=new Map;for(let e of m())for(let t of e.addresses)if(b(t.addr)){let i;try{i=new n(e.name)}catch(r){console.error(`[meter-core/PktCaptureAll] ${r}`),i?.close();continue}i.on("packet",r=>this.emit("packet",r,e.name)),this.caps.set(e.name,i)}}close(){for(let e of this.caps.values())e.close()}},c=class{buffer;position;out;constructor(){this.buffer=null,this.position=0,this.out=[]}write(e){for(;e.length>0;){if(this.buffer){if(this.buffer.length<2){let r=this.buffer[0],s=(e[0]<<8)+r;this.buffer=Buffer.alloc(s),this.buffer[0]=r,this.position=1}let i=Math.min(e.length,this.buffer.length-this.position);e.copy(this.buffer,this.position,0,i),this.position+=i,this.position===this.buffer.length&&(this.out.push(this.buffer),this.buffer=null,this.position=0),e=e.subarray(i);continue}if(e.length<2){this.buffer=Buffer.from(e),this.position=e.length;break}let t=e.readUInt16LE(0);if(t>e.length){this.buffer=Buffer.alloc(t),e.copy(this.buffer),this.position=e.length;break}this.out.push(e.subarray(0,t)),e=e.subarray(t)}}read(){return this.out.shift()}};export{n as PktCapture,l as PktCaptureAll,m as deviceList,B as findDevice};
